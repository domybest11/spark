== Physical Plan ==
TakeOrderedAndProject (76)
+- * HashAggregate (75)
   +- Exchange (74)
      +- * HashAggregate (73)
         +- * Project (72)
            +- SortMergeJoin LeftOuter (71)
               :- * Sort (65)
               :  +- Exchange (64)
               :     +- * Project (63)
               :        +- * BroadcastHashJoin LeftOuter BuildRight (62)
               :           :- * Project (57)
               :           :  +- SortMergeJoin Inner (56)
               :           :     :- * Sort (31)
               :           :     :  +- Exchange (30)
               :           :     :     +- * Project (29)
               :           :     :        +- * BroadcastHashJoin Inner BuildRight (28)
               :           :     :           :- * Project (23)
               :           :     :           :  +- * BroadcastHashJoin Inner BuildRight (22)
               :           :     :           :     :- * Project (17)
               :           :     :           :     :  +- * BroadcastHashJoin Inner BuildRight (16)
               :           :     :           :     :     :- * Project (10)
               :           :     :           :     :     :  +- * BroadcastHashJoin Inner BuildRight (9)
               :           :     :           :     :     :     :- * Filter (3)
               :           :     :           :     :     :     :  +- * ColumnarToRow (2)
               :           :     :           :     :     :     :     +- Scan parquet default.catalog_sales (1)
               :           :     :           :     :     :     +- BroadcastExchange (8)
               :           :     :           :     :     :        +- * Project (7)
               :           :     :           :     :     :           +- * Filter (6)
               :           :     :           :     :     :              +- * ColumnarToRow (5)
               :           :     :           :     :     :                 +- Scan parquet default.household_demographics (4)
               :           :     :           :     :     +- BroadcastExchange (15)
               :           :     :           :     :        +- * Project (14)
               :           :     :           :     :           +- * Filter (13)
               :           :     :           :     :              +- * ColumnarToRow (12)
               :           :     :           :     :                 +- Scan parquet default.customer_demographics (11)
               :           :     :           :     +- BroadcastExchange (21)
               :           :     :           :        +- * Filter (20)
               :           :     :           :           +- * ColumnarToRow (19)
               :           :     :           :              +- Scan parquet default.date_dim (18)
               :           :     :           +- BroadcastExchange (27)
               :           :     :              +- * Filter (26)
               :           :     :                 +- * ColumnarToRow (25)
               :           :     :                    +- Scan parquet default.item (24)
               :           :     +- * Sort (55)
               :           :        +- Exchange (54)
               :           :           +- * Project (53)
               :           :              +- * BroadcastHashJoin Inner BuildRight (52)
               :           :                 :- * Project (47)
               :           :                 :  +- * BroadcastHashJoin Inner BuildLeft (46)
               :           :                 :     :- BroadcastExchange (42)
               :           :                 :     :  +- * Project (41)
               :           :                 :     :     +- * BroadcastHashJoin Inner BuildLeft (40)
               :           :                 :     :        :- BroadcastExchange (36)
               :           :                 :     :        :  +- * Project (35)
               :           :                 :     :        :     +- * Filter (34)
               :           :                 :     :        :        +- * ColumnarToRow (33)
               :           :                 :     :        :           +- Scan parquet default.date_dim (32)
               :           :                 :     :        +- * Filter (39)
               :           :                 :     :           +- * ColumnarToRow (38)
               :           :                 :     :              +- Scan parquet default.date_dim (37)
               :           :                 :     +- * Filter (45)
               :           :                 :        +- * ColumnarToRow (44)
               :           :                 :           +- Scan parquet default.inventory (43)
               :           :                 +- BroadcastExchange (51)
               :           :                    +- * Filter (50)
               :           :                       +- * ColumnarToRow (49)
               :           :                          +- Scan parquet default.warehouse (48)
               :           +- BroadcastExchange (61)
               :              +- * Filter (60)
               :                 +- * ColumnarToRow (59)
               :                    +- Scan parquet default.promotion (58)
               +- * Sort (70)
                  +- Exchange (69)
                     +- * Filter (68)
                        +- * ColumnarToRow (67)
                           +- Scan parquet default.catalog_returns (66)


(1) Scan parquet default.catalog_sales
Output [8]: [cs_sold_date_sk#1, cs_ship_date_sk#2, cs_bill_cdemo_sk#3, cs_bill_hdemo_sk#4, cs_item_sk#5, cs_promo_sk#6, cs_order_number#7, cs_quantity#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_quantity), IsNotNull(cs_item_sk), IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_hdemo_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_ship_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_ship_date_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_quantity:int>

(2) ColumnarToRow [codegen id : 5]
Input [8]: [cs_sold_date_sk#1, cs_ship_date_sk#2, cs_bill_cdemo_sk#3, cs_bill_hdemo_sk#4, cs_item_sk#5, cs_promo_sk#6, cs_order_number#7, cs_quantity#8]

(3) Filter [codegen id : 5]
Input [8]: [cs_sold_date_sk#1, cs_ship_date_sk#2, cs_bill_cdemo_sk#3, cs_bill_hdemo_sk#4, cs_item_sk#5, cs_promo_sk#6, cs_order_number#7, cs_quantity#8]
Condition : (((((isnotnull(cs_quantity#8) AND isnotnull(cs_item_sk#5)) AND isnotnull(cs_bill_cdemo_sk#3)) AND isnotnull(cs_bill_hdemo_sk#4)) AND isnotnull(cs_sold_date_sk#1)) AND isnotnull(cs_ship_date_sk#2))

(4) Scan parquet default.household_demographics
Output [2]: [hd_demo_sk#9, hd_buy_potential#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_buy_potential), EqualTo(hd_buy_potential,1001-5000      ), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [hd_demo_sk#9, hd_buy_potential#10]

(6) Filter [codegen id : 1]
Input [2]: [hd_demo_sk#9, hd_buy_potential#10]
Condition : ((isnotnull(hd_buy_potential#10) AND (hd_buy_potential#10 = 1001-5000      )) AND isnotnull(hd_demo_sk#9))

(7) Project [codegen id : 1]
Output [1]: [hd_demo_sk#9]
Input [2]: [hd_demo_sk#9, hd_buy_potential#10]

(8) BroadcastExchange
Input [1]: [hd_demo_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(9) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_bill_hdemo_sk#4]
Right keys [1]: [hd_demo_sk#9]
Join condition: None

(10) Project [codegen id : 5]
Output [7]: [cs_sold_date_sk#1, cs_ship_date_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#5, cs_promo_sk#6, cs_order_number#7, cs_quantity#8]
Input [9]: [cs_sold_date_sk#1, cs_ship_date_sk#2, cs_bill_cdemo_sk#3, cs_bill_hdemo_sk#4, cs_item_sk#5, cs_promo_sk#6, cs_order_number#7, cs_quantity#8, hd_demo_sk#9]

(11) Scan parquet default.customer_demographics
Output [2]: [cd_demo_sk#12, cd_marital_status#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_marital_status), EqualTo(cd_marital_status,M), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [cd_demo_sk#12, cd_marital_status#13]

(13) Filter [codegen id : 2]
Input [2]: [cd_demo_sk#12, cd_marital_status#13]
Condition : ((isnotnull(cd_marital_status#13) AND (cd_marital_status#13 = M)) AND isnotnull(cd_demo_sk#12))

(14) Project [codegen id : 2]
Output [1]: [cd_demo_sk#12]
Input [2]: [cd_demo_sk#12, cd_marital_status#13]

(15) BroadcastExchange
Input [1]: [cd_demo_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(16) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_bill_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#12]
Join condition: None

(17) Project [codegen id : 5]
Output [6]: [cs_sold_date_sk#1, cs_ship_date_sk#2, cs_item_sk#5, cs_promo_sk#6, cs_order_number#7, cs_quantity#8]
Input [8]: [cs_sold_date_sk#1, cs_ship_date_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#5, cs_promo_sk#6, cs_order_number#7, cs_quantity#8, cd_demo_sk#12]

(18) Scan parquet default.date_dim
Output [2]: [d_date_sk#15, d_date#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(19) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#15, d_date#16]

(20) Filter [codegen id : 3]
Input [2]: [d_date_sk#15, d_date#16]
Condition : (isnotnull(d_date#16) AND isnotnull(d_date_sk#15))

(21) BroadcastExchange
Input [2]: [d_date_sk#15, d_date#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17]

(22) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_ship_date_sk#2]
Right keys [1]: [d_date_sk#15]
Join condition: None

(23) Project [codegen id : 5]
Output [6]: [cs_sold_date_sk#1, cs_item_sk#5, cs_promo_sk#6, cs_order_number#7, cs_quantity#8, d_date#16]
Input [8]: [cs_sold_date_sk#1, cs_ship_date_sk#2, cs_item_sk#5, cs_promo_sk#6, cs_order_number#7, cs_quantity#8, d_date_sk#15, d_date#16]

(24) Scan parquet default.item
Output [2]: [i_item_sk#18, i_item_desc#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(25) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#18, i_item_desc#19]

(26) Filter [codegen id : 4]
Input [2]: [i_item_sk#18, i_item_desc#19]
Condition : isnotnull(i_item_sk#18)

(27) BroadcastExchange
Input [2]: [i_item_sk#18, i_item_desc#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20]

(28) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#5]
Right keys [1]: [i_item_sk#18]
Join condition: None

(29) Project [codegen id : 5]
Output [7]: [cs_sold_date_sk#1, cs_item_sk#5, cs_promo_sk#6, cs_order_number#7, cs_quantity#8, d_date#16, i_item_desc#19]
Input [8]: [cs_sold_date_sk#1, cs_item_sk#5, cs_promo_sk#6, cs_order_number#7, cs_quantity#8, d_date#16, i_item_sk#18, i_item_desc#19]

(30) Exchange
Input [7]: [cs_sold_date_sk#1, cs_item_sk#5, cs_promo_sk#6, cs_order_number#7, cs_quantity#8, d_date#16, i_item_desc#19]
Arguments: hashpartitioning(cs_item_sk#5, cs_sold_date_sk#1, 5), ENSURE_REQUIREMENTS, [id=#21]

(31) Sort [codegen id : 6]
Input [7]: [cs_sold_date_sk#1, cs_item_sk#5, cs_promo_sk#6, cs_order_number#7, cs_quantity#8, d_date#16, i_item_desc#19]
Arguments: [cs_item_sk#5 ASC NULLS FIRST, cs_sold_date_sk#1 ASC NULLS FIRST], false, 0

(32) Scan parquet default.date_dim
Output [4]: [d_date_sk#22, d_date#23, d_week_seq#24, d_year#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk), IsNotNull(d_week_seq), IsNotNull(d_date)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_week_seq:int,d_year:int>

(33) ColumnarToRow [codegen id : 7]
Input [4]: [d_date_sk#22, d_date#23, d_week_seq#24, d_year#25]

(34) Filter [codegen id : 7]
Input [4]: [d_date_sk#22, d_date#23, d_week_seq#24, d_year#25]
Condition : ((((isnotnull(d_year#25) AND (d_year#25 = 2001)) AND isnotnull(d_date_sk#22)) AND isnotnull(d_week_seq#24)) AND isnotnull(d_date#23))

(35) Project [codegen id : 7]
Output [3]: [d_date_sk#22, d_date#23, d_week_seq#24]
Input [4]: [d_date_sk#22, d_date#23, d_week_seq#24, d_year#25]

(36) BroadcastExchange
Input [3]: [d_date_sk#22, d_date#23, d_week_seq#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#26]

(37) Scan parquet default.date_dim
Output [2]: [d_date_sk#27, d_week_seq#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(38) ColumnarToRow
Input [2]: [d_date_sk#27, d_week_seq#28]

(39) Filter
Input [2]: [d_date_sk#27, d_week_seq#28]
Condition : (isnotnull(d_week_seq#28) AND isnotnull(d_date_sk#27))

(40) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [d_week_seq#24]
Right keys [1]: [d_week_seq#28]
Join condition: None

(41) Project [codegen id : 8]
Output [4]: [d_date_sk#22, d_date#23, d_week_seq#24, d_date_sk#27]
Input [5]: [d_date_sk#22, d_date#23, d_week_seq#24, d_date_sk#27, d_week_seq#28]

(42) BroadcastExchange
Input [4]: [d_date_sk#22, d_date#23, d_week_seq#24, d_date_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[3, int, true] as bigint)),false), [id=#29]

(43) Scan parquet default.inventory
Output [4]: [inv_date_sk#30, inv_item_sk#31, inv_warehouse_sk#32, inv_quantity_on_hand#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/inventory]
PushedFilters: [IsNotNull(inv_quantity_on_hand), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk), IsNotNull(inv_date_sk)]
ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(44) ColumnarToRow
Input [4]: [inv_date_sk#30, inv_item_sk#31, inv_warehouse_sk#32, inv_quantity_on_hand#33]

(45) Filter
Input [4]: [inv_date_sk#30, inv_item_sk#31, inv_warehouse_sk#32, inv_quantity_on_hand#33]
Condition : (((isnotnull(inv_quantity_on_hand#33) AND isnotnull(inv_item_sk#31)) AND isnotnull(inv_warehouse_sk#32)) AND isnotnull(inv_date_sk#30))

(46) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [d_date_sk#27]
Right keys [1]: [inv_date_sk#30]
Join condition: None

(47) Project [codegen id : 10]
Output [6]: [d_date_sk#22, d_date#23, d_week_seq#24, inv_item_sk#31, inv_warehouse_sk#32, inv_quantity_on_hand#33]
Input [8]: [d_date_sk#22, d_date#23, d_week_seq#24, d_date_sk#27, inv_date_sk#30, inv_item_sk#31, inv_warehouse_sk#32, inv_quantity_on_hand#33]

(48) Scan parquet default.warehouse
Output [2]: [w_warehouse_sk#34, w_warehouse_name#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>

(49) ColumnarToRow [codegen id : 9]
Input [2]: [w_warehouse_sk#34, w_warehouse_name#35]

(50) Filter [codegen id : 9]
Input [2]: [w_warehouse_sk#34, w_warehouse_name#35]
Condition : isnotnull(w_warehouse_sk#34)

(51) BroadcastExchange
Input [2]: [w_warehouse_sk#34, w_warehouse_name#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#36]

(52) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [inv_warehouse_sk#32]
Right keys [1]: [w_warehouse_sk#34]
Join condition: None

(53) Project [codegen id : 10]
Output [6]: [d_date_sk#22, d_date#23, d_week_seq#24, inv_item_sk#31, inv_quantity_on_hand#33, w_warehouse_name#35]
Input [8]: [d_date_sk#22, d_date#23, d_week_seq#24, inv_item_sk#31, inv_warehouse_sk#32, inv_quantity_on_hand#33, w_warehouse_sk#34, w_warehouse_name#35]

(54) Exchange
Input [6]: [d_date_sk#22, d_date#23, d_week_seq#24, inv_item_sk#31, inv_quantity_on_hand#33, w_warehouse_name#35]
Arguments: hashpartitioning(inv_item_sk#31, d_date_sk#22, 5), ENSURE_REQUIREMENTS, [id=#37]

(55) Sort [codegen id : 11]
Input [6]: [d_date_sk#22, d_date#23, d_week_seq#24, inv_item_sk#31, inv_quantity_on_hand#33, w_warehouse_name#35]
Arguments: [inv_item_sk#31 ASC NULLS FIRST, d_date_sk#22 ASC NULLS FIRST], false, 0

(56) SortMergeJoin
Left keys [2]: [cs_item_sk#5, cs_sold_date_sk#1]
Right keys [2]: [inv_item_sk#31, d_date_sk#22]
Join condition: ((inv_quantity_on_hand#33 < cs_quantity#8) AND (d_date#16 > d_date#23 + 5 days))

(57) Project [codegen id : 13]
Output [6]: [cs_item_sk#5, cs_promo_sk#6, cs_order_number#7, w_warehouse_name#35, i_item_desc#19, d_week_seq#24]
Input [13]: [cs_sold_date_sk#1, cs_item_sk#5, cs_promo_sk#6, cs_order_number#7, cs_quantity#8, d_date#16, i_item_desc#19, d_date_sk#22, d_date#23, d_week_seq#24, inv_item_sk#31, inv_quantity_on_hand#33, w_warehouse_name#35]

(58) Scan parquet default.promotion
Output [1]: [p_promo_sk#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int>

(59) ColumnarToRow [codegen id : 12]
Input [1]: [p_promo_sk#38]

(60) Filter [codegen id : 12]
Input [1]: [p_promo_sk#38]
Condition : isnotnull(p_promo_sk#38)

(61) BroadcastExchange
Input [1]: [p_promo_sk#38]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#39]

(62) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_promo_sk#6]
Right keys [1]: [p_promo_sk#38]
Join condition: None

(63) Project [codegen id : 13]
Output [5]: [cs_item_sk#5, cs_order_number#7, w_warehouse_name#35, i_item_desc#19, d_week_seq#24]
Input [7]: [cs_item_sk#5, cs_promo_sk#6, cs_order_number#7, w_warehouse_name#35, i_item_desc#19, d_week_seq#24, p_promo_sk#38]

(64) Exchange
Input [5]: [cs_item_sk#5, cs_order_number#7, w_warehouse_name#35, i_item_desc#19, d_week_seq#24]
Arguments: hashpartitioning(cs_item_sk#5, cs_order_number#7, 5), ENSURE_REQUIREMENTS, [id=#40]

(65) Sort [codegen id : 14]
Input [5]: [cs_item_sk#5, cs_order_number#7, w_warehouse_name#35, i_item_desc#19, d_week_seq#24]
Arguments: [cs_item_sk#5 ASC NULLS FIRST, cs_order_number#7 ASC NULLS FIRST], false, 0

(66) Scan parquet default.catalog_returns
Output [2]: [cr_item_sk#41, cr_order_number#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int>

(67) ColumnarToRow [codegen id : 15]
Input [2]: [cr_item_sk#41, cr_order_number#42]

(68) Filter [codegen id : 15]
Input [2]: [cr_item_sk#41, cr_order_number#42]
Condition : (isnotnull(cr_item_sk#41) AND isnotnull(cr_order_number#42))

(69) Exchange
Input [2]: [cr_item_sk#41, cr_order_number#42]
Arguments: hashpartitioning(cr_item_sk#41, cr_order_number#42, 5), ENSURE_REQUIREMENTS, [id=#43]

(70) Sort [codegen id : 16]
Input [2]: [cr_item_sk#41, cr_order_number#42]
Arguments: [cr_item_sk#41 ASC NULLS FIRST, cr_order_number#42 ASC NULLS FIRST], false, 0

(71) SortMergeJoin
Left keys [2]: [cs_item_sk#5, cs_order_number#7]
Right keys [2]: [cr_item_sk#41, cr_order_number#42]
Join condition: None

(72) Project [codegen id : 17]
Output [3]: [w_warehouse_name#35, i_item_desc#19, d_week_seq#24]
Input [7]: [cs_item_sk#5, cs_order_number#7, w_warehouse_name#35, i_item_desc#19, d_week_seq#24, cr_item_sk#41, cr_order_number#42]

(73) HashAggregate [codegen id : 17]
Input [3]: [w_warehouse_name#35, i_item_desc#19, d_week_seq#24]
Keys [3]: [i_item_desc#19, w_warehouse_name#35, d_week_seq#24]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#44]
Results [4]: [i_item_desc#19, w_warehouse_name#35, d_week_seq#24, count#45]

(74) Exchange
Input [4]: [i_item_desc#19, w_warehouse_name#35, d_week_seq#24, count#45]
Arguments: hashpartitioning(i_item_desc#19, w_warehouse_name#35, d_week_seq#24, 5), ENSURE_REQUIREMENTS, [id=#46]

(75) HashAggregate [codegen id : 18]
Input [4]: [i_item_desc#19, w_warehouse_name#35, d_week_seq#24, count#45]
Keys [3]: [i_item_desc#19, w_warehouse_name#35, d_week_seq#24]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#47]
Results [6]: [i_item_desc#19, w_warehouse_name#35, d_week_seq#24, count(1)#47 AS no_promo#48, count(1)#47 AS promo#49, count(1)#47 AS total_cnt#50]

(76) TakeOrderedAndProject
Input [6]: [i_item_desc#19, w_warehouse_name#35, d_week_seq#24, no_promo#48, promo#49, total_cnt#50]
Arguments: 100, [total_cnt#50 DESC NULLS LAST, i_item_desc#19 ASC NULLS FIRST, w_warehouse_name#35 ASC NULLS FIRST, d_week_seq#24 ASC NULLS FIRST], [i_item_desc#19, w_warehouse_name#35, d_week_seq#24, no_promo#48, promo#49, total_cnt#50]

