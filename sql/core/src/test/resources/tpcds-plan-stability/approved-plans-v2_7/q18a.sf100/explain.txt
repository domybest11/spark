== Physical Plan ==
TakeOrderedAndProject (175)
+- Union (174)
   :- * HashAggregate (48)
   :  +- Exchange (47)
   :     +- * HashAggregate (46)
   :        +- * Project (45)
   :           +- SortMergeJoin Inner (44)
   :              :- * Sort (25)
   :              :  +- Exchange (24)
   :              :     +- * Project (23)
   :              :        +- * BroadcastHashJoin Inner BuildRight (22)
   :              :           :- * Project (17)
   :              :           :  +- * BroadcastHashJoin Inner BuildRight (16)
   :              :           :     :- * Project (10)
   :              :           :     :  +- * BroadcastHashJoin Inner BuildRight (9)
   :              :           :     :     :- * Filter (3)
   :              :           :     :     :  +- * ColumnarToRow (2)
   :              :           :     :     :     +- Scan parquet default.catalog_sales (1)
   :              :           :     :     +- BroadcastExchange (8)
   :              :           :     :        +- * Project (7)
   :              :           :     :           +- * Filter (6)
   :              :           :     :              +- * ColumnarToRow (5)
   :              :           :     :                 +- Scan parquet default.customer_demographics (4)
   :              :           :     +- BroadcastExchange (15)
   :              :           :        +- * Project (14)
   :              :           :           +- * Filter (13)
   :              :           :              +- * ColumnarToRow (12)
   :              :           :                 +- Scan parquet default.date_dim (11)
   :              :           +- BroadcastExchange (21)
   :              :              +- * Filter (20)
   :              :                 +- * ColumnarToRow (19)
   :              :                    +- Scan parquet default.item (18)
   :              +- * Sort (43)
   :                 +- Exchange (42)
   :                    +- * Project (41)
   :                       +- * BroadcastHashJoin Inner BuildRight (40)
   :                          :- * Project (35)
   :                          :  +- * BroadcastHashJoin Inner BuildRight (34)
   :                          :     :- * Project (29)
   :                          :     :  +- * Filter (28)
   :                          :     :     +- * ColumnarToRow (27)
   :                          :     :        +- Scan parquet default.customer (26)
   :                          :     +- BroadcastExchange (33)
   :                          :        +- * Filter (32)
   :                          :           +- * ColumnarToRow (31)
   :                          :              +- Scan parquet default.customer_demographics (30)
   :                          +- BroadcastExchange (39)
   :                             +- * Filter (38)
   :                                +- * ColumnarToRow (37)
   :                                   +- Scan parquet default.customer_address (36)
   :- * HashAggregate (82)
   :  +- Exchange (81)
   :     +- * HashAggregate (80)
   :        +- * Project (79)
   :           +- * BroadcastHashJoin Inner BuildRight (78)
   :              :- * Project (60)
   :              :  +- * BroadcastHashJoin Inner BuildRight (59)
   :              :     :- * Project (57)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (56)
   :              :     :     :- * Project (54)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (53)
   :              :     :     :     :- * Filter (51)
   :              :     :     :     :  +- * ColumnarToRow (50)
   :              :     :     :     :     +- Scan parquet default.catalog_sales (49)
   :              :     :     :     +- ReusedExchange (52)
   :              :     :     +- ReusedExchange (55)
   :              :     +- ReusedExchange (58)
   :              +- BroadcastExchange (77)
   :                 +- * Project (76)
   :                    +- * BroadcastHashJoin Inner BuildLeft (75)
   :                       :- BroadcastExchange (71)
   :                       :  +- * Project (70)
   :                       :     +- * BroadcastHashJoin Inner BuildRight (69)
   :                       :        :- * Project (64)
   :                       :        :  +- * Filter (63)
   :                       :        :     +- * ColumnarToRow (62)
   :                       :        :        +- Scan parquet default.customer (61)
   :                       :        +- BroadcastExchange (68)
   :                       :           +- * Filter (67)
   :                       :              +- * ColumnarToRow (66)
   :                       :                 +- Scan parquet default.customer_address (65)
   :                       +- * Filter (74)
   :                          +- * ColumnarToRow (73)
   :                             +- Scan parquet default.customer_demographics (72)
   :- * HashAggregate (117)
   :  +- Exchange (116)
   :     +- * HashAggregate (115)
   :        +- * Project (114)
   :           +- * BroadcastHashJoin Inner BuildRight (113)
   :              :- * Project (94)
   :              :  +- * BroadcastHashJoin Inner BuildRight (93)
   :              :     :- * Project (91)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (90)
   :              :     :     :- * Project (88)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (87)
   :              :     :     :     :- * Filter (85)
   :              :     :     :     :  +- * ColumnarToRow (84)
   :              :     :     :     :     +- Scan parquet default.catalog_sales (83)
   :              :     :     :     +- ReusedExchange (86)
   :              :     :     +- ReusedExchange (89)
   :              :     +- ReusedExchange (92)
   :              +- BroadcastExchange (112)
   :                 +- * Project (111)
   :                    +- * BroadcastHashJoin Inner BuildLeft (110)
   :                       :- BroadcastExchange (106)
   :                       :  +- * Project (105)
   :                       :     +- * BroadcastHashJoin Inner BuildRight (104)
   :                       :        :- * Project (98)
   :                       :        :  +- * Filter (97)
   :                       :        :     +- * ColumnarToRow (96)
   :                       :        :        +- Scan parquet default.customer (95)
   :                       :        +- BroadcastExchange (103)
   :                       :           +- * Project (102)
   :                       :              +- * Filter (101)
   :                       :                 +- * ColumnarToRow (100)
   :                       :                    +- Scan parquet default.customer_address (99)
   :                       +- * Filter (109)
   :                          +- * ColumnarToRow (108)
   :                             +- Scan parquet default.customer_demographics (107)
   :- * HashAggregate (152)
   :  +- Exchange (151)
   :     +- * HashAggregate (150)
   :        +- * Project (149)
   :           +- * BroadcastHashJoin Inner BuildRight (148)
   :              :- * Project (146)
   :              :  +- * BroadcastHashJoin Inner BuildRight (145)
   :              :     :- * Project (126)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (125)
   :              :     :     :- * Project (123)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (122)
   :              :     :     :     :- * Filter (120)
   :              :     :     :     :  +- * ColumnarToRow (119)
   :              :     :     :     :     +- Scan parquet default.catalog_sales (118)
   :              :     :     :     +- ReusedExchange (121)
   :              :     :     +- ReusedExchange (124)
   :              :     +- BroadcastExchange (144)
   :              :        +- * Project (143)
   :              :           +- * BroadcastHashJoin Inner BuildLeft (142)
   :              :              :- BroadcastExchange (138)
   :              :              :  +- * Project (137)
   :              :              :     +- * BroadcastHashJoin Inner BuildRight (136)
   :              :              :        :- * Project (130)
   :              :              :        :  +- * Filter (129)
   :              :              :        :     +- * ColumnarToRow (128)
   :              :              :        :        +- Scan parquet default.customer (127)
   :              :              :        +- BroadcastExchange (135)
   :              :              :           +- * Project (134)
   :              :              :              +- * Filter (133)
   :              :              :                 +- * ColumnarToRow (132)
   :              :              :                    +- Scan parquet default.customer_address (131)
   :              :              +- * Filter (141)
   :              :                 +- * ColumnarToRow (140)
   :              :                    +- Scan parquet default.customer_demographics (139)
   :              +- ReusedExchange (147)
   +- * HashAggregate (173)
      +- Exchange (172)
         +- * HashAggregate (171)
            +- * Project (170)
               +- * BroadcastHashJoin Inner BuildRight (169)
                  :- * Project (167)
                  :  +- * BroadcastHashJoin Inner BuildRight (166)
                  :     :- * Project (161)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (160)
                  :     :     :- * Project (158)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (157)
                  :     :     :     :- * Filter (155)
                  :     :     :     :  +- * ColumnarToRow (154)
                  :     :     :     :     +- Scan parquet default.catalog_sales (153)
                  :     :     :     +- ReusedExchange (156)
                  :     :     +- ReusedExchange (159)
                  :     +- BroadcastExchange (165)
                  :        +- * Filter (164)
                  :           +- * ColumnarToRow (163)
                  :              +- Scan parquet default.item (162)
                  +- ReusedExchange (168)


(1) Scan parquet default.catalog_sales
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]

(3) Filter [codegen id : 4]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#3) AND isnotnull(cs_bill_customer_sk#2)) AND isnotnull(cs_sold_date_sk#1)) AND isnotnull(cs_item_sk#4))

(4) Scan parquet default.customer_demographics
Output [4]: [cd_demo_sk#10, cd_gender#11, cd_education_status#12, cd_dep_count#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_education_status), EqualTo(cd_gender,M), EqualTo(cd_education_status,College             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_education_status:string,cd_dep_count:int>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_education_status#12, cd_dep_count#13]

(6) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_education_status#12, cd_dep_count#13]
Condition : ((((isnotnull(cd_gender#11) AND isnotnull(cd_education_status#12)) AND (cd_gender#11 = M)) AND (cd_education_status#12 = College             )) AND isnotnull(cd_demo_sk#10))

(7) Project [codegen id : 1]
Output [2]: [cd_demo_sk#10, cd_dep_count#13]
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_education_status#12, cd_dep_count#13]

(8) BroadcastExchange
Input [2]: [cd_demo_sk#10, cd_dep_count#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_bill_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#10]
Join condition: None

(10) Project [codegen id : 4]
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13]
Input [11]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_demo_sk#10, cd_dep_count#13]

(11) Scan parquet default.date_dim
Output [2]: [d_date_sk#15, d_year#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#15, d_year#16]

(13) Filter [codegen id : 2]
Input [2]: [d_date_sk#15, d_year#16]
Condition : ((isnotnull(d_year#16) AND (d_year#16 = 2001)) AND isnotnull(d_date_sk#15))

(14) Project [codegen id : 2]
Output [1]: [d_date_sk#15]
Input [2]: [d_date_sk#15, d_year#16]

(15) BroadcastExchange
Input [1]: [d_date_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17]

(16) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#15]
Join condition: None

(17) Project [codegen id : 4]
Output [8]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13]
Input [10]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, d_date_sk#15]

(18) Scan parquet default.item
Output [2]: [i_item_sk#18, i_item_id#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(19) ColumnarToRow [codegen id : 3]
Input [2]: [i_item_sk#18, i_item_id#19]

(20) Filter [codegen id : 3]
Input [2]: [i_item_sk#18, i_item_id#19]
Condition : isnotnull(i_item_sk#18)

(21) BroadcastExchange
Input [2]: [i_item_sk#18, i_item_id#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#18]
Join condition: None

(23) Project [codegen id : 4]
Output [8]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, i_item_id#19]
Input [10]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, i_item_sk#18, i_item_id#19]

(24) Exchange
Input [8]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, i_item_id#19]
Arguments: hashpartitioning(cs_bill_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#21]

(25) Sort [codegen id : 5]
Input [8]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, i_item_id#19]
Arguments: [cs_bill_customer_sk#2 ASC NULLS FIRST], false, 0

(26) Scan parquet default.customer
Output [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_month#25, c_birth_year#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [9,5,12,4,1,10]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(27) ColumnarToRow [codegen id : 8]
Input [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_month#25, c_birth_year#26]

(28) Filter [codegen id : 8]
Input [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_month#25, c_birth_year#26]
Condition : (((c_birth_month#25 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#22)) AND isnotnull(c_current_cdemo_sk#23)) AND isnotnull(c_current_addr_sk#24))

(29) Project [codegen id : 8]
Output [4]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_year#26]
Input [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_month#25, c_birth_year#26]

(30) Scan parquet default.customer_demographics
Output [1]: [cd_demo_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(31) ColumnarToRow [codegen id : 6]
Input [1]: [cd_demo_sk#27]

(32) Filter [codegen id : 6]
Input [1]: [cd_demo_sk#27]
Condition : isnotnull(cd_demo_sk#27)

(33) BroadcastExchange
Input [1]: [cd_demo_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(34) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_current_cdemo_sk#23]
Right keys [1]: [cd_demo_sk#27]
Join condition: None

(35) Project [codegen id : 8]
Output [3]: [c_customer_sk#22, c_current_addr_sk#24, c_birth_year#26]
Input [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_year#26, cd_demo_sk#27]

(36) Scan parquet default.customer_address
Output [4]: [ca_address_sk#29, ca_county#30, ca_state#31, ca_country#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [ND,WI,AL,NC,OK,MS,TN]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string,ca_country:string>

(37) ColumnarToRow [codegen id : 7]
Input [4]: [ca_address_sk#29, ca_county#30, ca_state#31, ca_country#32]

(38) Filter [codegen id : 7]
Input [4]: [ca_address_sk#29, ca_county#30, ca_state#31, ca_country#32]
Condition : (ca_state#31 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#29))

(39) BroadcastExchange
Input [4]: [ca_address_sk#29, ca_county#30, ca_state#31, ca_country#32]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#33]

(40) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_current_addr_sk#24]
Right keys [1]: [ca_address_sk#29]
Join condition: None

(41) Project [codegen id : 8]
Output [5]: [c_customer_sk#22, c_birth_year#26, ca_county#30, ca_state#31, ca_country#32]
Input [7]: [c_customer_sk#22, c_current_addr_sk#24, c_birth_year#26, ca_address_sk#29, ca_county#30, ca_state#31, ca_country#32]

(42) Exchange
Input [5]: [c_customer_sk#22, c_birth_year#26, ca_county#30, ca_state#31, ca_country#32]
Arguments: hashpartitioning(c_customer_sk#22, 5), ENSURE_REQUIREMENTS, [id=#34]

(43) Sort [codegen id : 9]
Input [5]: [c_customer_sk#22, c_birth_year#26, ca_county#30, ca_state#31, ca_country#32]
Arguments: [c_customer_sk#22 ASC NULLS FIRST], false, 0

(44) SortMergeJoin
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#22]
Join condition: None

(45) Project [codegen id : 10]
Output [11]: [i_item_id#19, ca_country#32, ca_state#31, ca_county#30, cast(cs_quantity#5 as decimal(12,2)) AS agg1#35, cast(cs_list_price#6 as decimal(12,2)) AS agg2#36, cast(cs_coupon_amt#8 as decimal(12,2)) AS agg3#37, cast(cs_sales_price#7 as decimal(12,2)) AS agg4#38, cast(cs_net_profit#9 as decimal(12,2)) AS agg5#39, cast(c_birth_year#26 as decimal(12,2)) AS agg6#40, cast(cd_dep_count#13 as decimal(12,2)) AS agg7#41]
Input [13]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, i_item_id#19, c_customer_sk#22, c_birth_year#26, ca_county#30, ca_state#31, ca_country#32]

(46) HashAggregate [codegen id : 10]
Input [11]: [i_item_id#19, ca_country#32, ca_state#31, ca_county#30, agg1#35, agg2#36, agg3#37, agg4#38, agg5#39, agg6#40, agg7#41]
Keys [4]: [i_item_id#19, ca_country#32, ca_state#31, ca_county#30]
Functions [7]: [partial_avg(agg1#35), partial_avg(agg2#36), partial_avg(agg3#37), partial_avg(agg4#38), partial_avg(agg5#39), partial_avg(agg6#40), partial_avg(agg7#41)]
Aggregate Attributes [14]: [sum#42, count#43, sum#44, count#45, sum#46, count#47, sum#48, count#49, sum#50, count#51, sum#52, count#53, sum#54, count#55]
Results [18]: [i_item_id#19, ca_country#32, ca_state#31, ca_county#30, sum#56, count#57, sum#58, count#59, sum#60, count#61, sum#62, count#63, sum#64, count#65, sum#66, count#67, sum#68, count#69]

(47) Exchange
Input [18]: [i_item_id#19, ca_country#32, ca_state#31, ca_county#30, sum#56, count#57, sum#58, count#59, sum#60, count#61, sum#62, count#63, sum#64, count#65, sum#66, count#67, sum#68, count#69]
Arguments: hashpartitioning(i_item_id#19, ca_country#32, ca_state#31, ca_county#30, 5), ENSURE_REQUIREMENTS, [id=#70]

(48) HashAggregate [codegen id : 11]
Input [18]: [i_item_id#19, ca_country#32, ca_state#31, ca_county#30, sum#56, count#57, sum#58, count#59, sum#60, count#61, sum#62, count#63, sum#64, count#65, sum#66, count#67, sum#68, count#69]
Keys [4]: [i_item_id#19, ca_country#32, ca_state#31, ca_county#30]
Functions [7]: [avg(agg1#35), avg(agg2#36), avg(agg3#37), avg(agg4#38), avg(agg5#39), avg(agg6#40), avg(agg7#41)]
Aggregate Attributes [7]: [avg(agg1#35)#71, avg(agg2#36)#72, avg(agg3#37)#73, avg(agg4#38)#74, avg(agg5#39)#75, avg(agg6#40)#76, avg(agg7#41)#77]
Results [11]: [i_item_id#19, ca_country#32, ca_state#31, ca_county#30, avg(agg1#35)#71 AS agg1#78, avg(agg2#36)#72 AS agg2#79, avg(agg3#37)#73 AS agg3#80, avg(agg4#38)#74 AS agg4#81, avg(agg5#39)#75 AS agg5#82, avg(agg6#40)#76 AS agg6#83, avg(agg7#41)#77 AS agg7#84]

(49) Scan parquet default.catalog_sales
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(50) ColumnarToRow [codegen id : 18]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]

(51) Filter [codegen id : 18]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#3) AND isnotnull(cs_bill_customer_sk#2)) AND isnotnull(cs_sold_date_sk#1)) AND isnotnull(cs_item_sk#4))

(52) ReusedExchange [Reuses operator id: 8]
Output [2]: [cd_demo_sk#10, cd_dep_count#13]

(53) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [cs_bill_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#10]
Join condition: None

(54) Project [codegen id : 18]
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13]
Input [11]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_demo_sk#10, cd_dep_count#13]

(55) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#15]

(56) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#15]
Join condition: None

(57) Project [codegen id : 18]
Output [8]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13]
Input [10]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, d_date_sk#15]

(58) ReusedExchange [Reuses operator id: 21]
Output [2]: [i_item_sk#18, i_item_id#19]

(59) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#18]
Join condition: None

(60) Project [codegen id : 18]
Output [8]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, i_item_id#19]
Input [10]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, i_item_sk#18, i_item_id#19]

(61) Scan parquet default.customer
Output [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_month#25, c_birth_year#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [9,5,12,4,1,10]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(62) ColumnarToRow [codegen id : 16]
Input [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_month#25, c_birth_year#26]

(63) Filter [codegen id : 16]
Input [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_month#25, c_birth_year#26]
Condition : (((c_birth_month#25 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#22)) AND isnotnull(c_current_cdemo_sk#23)) AND isnotnull(c_current_addr_sk#24))

(64) Project [codegen id : 16]
Output [4]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_year#26]
Input [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_month#25, c_birth_year#26]

(65) Scan parquet default.customer_address
Output [3]: [ca_address_sk#29, ca_state#31, ca_country#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [ND,WI,AL,NC,OK,MS,TN]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(66) ColumnarToRow [codegen id : 15]
Input [3]: [ca_address_sk#29, ca_state#31, ca_country#32]

(67) Filter [codegen id : 15]
Input [3]: [ca_address_sk#29, ca_state#31, ca_country#32]
Condition : (ca_state#31 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#29))

(68) BroadcastExchange
Input [3]: [ca_address_sk#29, ca_state#31, ca_country#32]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#85]

(69) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [c_current_addr_sk#24]
Right keys [1]: [ca_address_sk#29]
Join condition: None

(70) Project [codegen id : 16]
Output [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_birth_year#26, ca_state#31, ca_country#32]
Input [7]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_year#26, ca_address_sk#29, ca_state#31, ca_country#32]

(71) BroadcastExchange
Input [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_birth_year#26, ca_state#31, ca_country#32]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#86]

(72) Scan parquet default.customer_demographics
Output [1]: [cd_demo_sk#87]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(73) ColumnarToRow
Input [1]: [cd_demo_sk#87]

(74) Filter
Input [1]: [cd_demo_sk#87]
Condition : isnotnull(cd_demo_sk#87)

(75) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [c_current_cdemo_sk#23]
Right keys [1]: [cd_demo_sk#87]
Join condition: None

(76) Project [codegen id : 17]
Output [4]: [c_customer_sk#22, c_birth_year#26, ca_state#31, ca_country#32]
Input [6]: [c_customer_sk#22, c_current_cdemo_sk#23, c_birth_year#26, ca_state#31, ca_country#32, cd_demo_sk#87]

(77) BroadcastExchange
Input [4]: [c_customer_sk#22, c_birth_year#26, ca_state#31, ca_country#32]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#88]

(78) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#22]
Join condition: None

(79) Project [codegen id : 18]
Output [10]: [i_item_id#19, ca_country#32, ca_state#31, cast(cs_quantity#5 as decimal(12,2)) AS agg1#35, cast(cs_list_price#6 as decimal(12,2)) AS agg2#36, cast(cs_coupon_amt#8 as decimal(12,2)) AS agg3#37, cast(cs_sales_price#7 as decimal(12,2)) AS agg4#38, cast(cs_net_profit#9 as decimal(12,2)) AS agg5#39, cast(c_birth_year#26 as decimal(12,2)) AS agg6#40, cast(cd_dep_count#13 as decimal(12,2)) AS agg7#41]
Input [12]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, i_item_id#19, c_customer_sk#22, c_birth_year#26, ca_state#31, ca_country#32]

(80) HashAggregate [codegen id : 18]
Input [10]: [i_item_id#19, ca_country#32, ca_state#31, agg1#35, agg2#36, agg3#37, agg4#38, agg5#39, agg6#40, agg7#41]
Keys [3]: [i_item_id#19, ca_country#32, ca_state#31]
Functions [7]: [partial_avg(agg1#35), partial_avg(agg2#36), partial_avg(agg3#37), partial_avg(agg4#38), partial_avg(agg5#39), partial_avg(agg6#40), partial_avg(agg7#41)]
Aggregate Attributes [14]: [sum#89, count#90, sum#91, count#92, sum#93, count#94, sum#95, count#96, sum#97, count#98, sum#99, count#100, sum#101, count#102]
Results [17]: [i_item_id#19, ca_country#32, ca_state#31, sum#103, count#104, sum#105, count#106, sum#107, count#108, sum#109, count#110, sum#111, count#112, sum#113, count#114, sum#115, count#116]

(81) Exchange
Input [17]: [i_item_id#19, ca_country#32, ca_state#31, sum#103, count#104, sum#105, count#106, sum#107, count#108, sum#109, count#110, sum#111, count#112, sum#113, count#114, sum#115, count#116]
Arguments: hashpartitioning(i_item_id#19, ca_country#32, ca_state#31, 5), ENSURE_REQUIREMENTS, [id=#117]

(82) HashAggregate [codegen id : 19]
Input [17]: [i_item_id#19, ca_country#32, ca_state#31, sum#103, count#104, sum#105, count#106, sum#107, count#108, sum#109, count#110, sum#111, count#112, sum#113, count#114, sum#115, count#116]
Keys [3]: [i_item_id#19, ca_country#32, ca_state#31]
Functions [7]: [avg(agg1#35), avg(agg2#36), avg(agg3#37), avg(agg4#38), avg(agg5#39), avg(agg6#40), avg(agg7#41)]
Aggregate Attributes [7]: [avg(agg1#35)#118, avg(agg2#36)#119, avg(agg3#37)#120, avg(agg4#38)#121, avg(agg5#39)#122, avg(agg6#40)#123, avg(agg7#41)#124]
Results [11]: [i_item_id#19, ca_country#32, ca_state#31, null AS county#125, avg(agg1#35)#118 AS agg1#126, avg(agg2#36)#119 AS agg2#127, avg(agg3#37)#120 AS agg3#128, avg(agg4#38)#121 AS agg4#129, avg(agg5#39)#122 AS agg5#130, avg(agg6#40)#123 AS agg6#131, avg(agg7#41)#124 AS agg7#132]

(83) Scan parquet default.catalog_sales
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(84) ColumnarToRow [codegen id : 26]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]

(85) Filter [codegen id : 26]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#3) AND isnotnull(cs_bill_customer_sk#2)) AND isnotnull(cs_sold_date_sk#1)) AND isnotnull(cs_item_sk#4))

(86) ReusedExchange [Reuses operator id: 8]
Output [2]: [cd_demo_sk#10, cd_dep_count#13]

(87) BroadcastHashJoin [codegen id : 26]
Left keys [1]: [cs_bill_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#10]
Join condition: None

(88) Project [codegen id : 26]
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13]
Input [11]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_demo_sk#10, cd_dep_count#13]

(89) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#15]

(90) BroadcastHashJoin [codegen id : 26]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#15]
Join condition: None

(91) Project [codegen id : 26]
Output [8]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13]
Input [10]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, d_date_sk#15]

(92) ReusedExchange [Reuses operator id: 21]
Output [2]: [i_item_sk#18, i_item_id#19]

(93) BroadcastHashJoin [codegen id : 26]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#18]
Join condition: None

(94) Project [codegen id : 26]
Output [8]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, i_item_id#19]
Input [10]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, i_item_sk#18, i_item_id#19]

(95) Scan parquet default.customer
Output [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_month#25, c_birth_year#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [9,5,12,4,1,10]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(96) ColumnarToRow [codegen id : 24]
Input [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_month#25, c_birth_year#26]

(97) Filter [codegen id : 24]
Input [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_month#25, c_birth_year#26]
Condition : (((c_birth_month#25 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#22)) AND isnotnull(c_current_cdemo_sk#23)) AND isnotnull(c_current_addr_sk#24))

(98) Project [codegen id : 24]
Output [4]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_year#26]
Input [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_month#25, c_birth_year#26]

(99) Scan parquet default.customer_address
Output [3]: [ca_address_sk#29, ca_state#31, ca_country#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [ND,WI,AL,NC,OK,MS,TN]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(100) ColumnarToRow [codegen id : 23]
Input [3]: [ca_address_sk#29, ca_state#31, ca_country#32]

(101) Filter [codegen id : 23]
Input [3]: [ca_address_sk#29, ca_state#31, ca_country#32]
Condition : (ca_state#31 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#29))

(102) Project [codegen id : 23]
Output [2]: [ca_address_sk#29, ca_country#32]
Input [3]: [ca_address_sk#29, ca_state#31, ca_country#32]

(103) BroadcastExchange
Input [2]: [ca_address_sk#29, ca_country#32]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#133]

(104) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [c_current_addr_sk#24]
Right keys [1]: [ca_address_sk#29]
Join condition: None

(105) Project [codegen id : 24]
Output [4]: [c_customer_sk#22, c_current_cdemo_sk#23, c_birth_year#26, ca_country#32]
Input [6]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_year#26, ca_address_sk#29, ca_country#32]

(106) BroadcastExchange
Input [4]: [c_customer_sk#22, c_current_cdemo_sk#23, c_birth_year#26, ca_country#32]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#134]

(107) Scan parquet default.customer_demographics
Output [1]: [cd_demo_sk#135]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(108) ColumnarToRow
Input [1]: [cd_demo_sk#135]

(109) Filter
Input [1]: [cd_demo_sk#135]
Condition : isnotnull(cd_demo_sk#135)

(110) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [c_current_cdemo_sk#23]
Right keys [1]: [cd_demo_sk#135]
Join condition: None

(111) Project [codegen id : 25]
Output [3]: [c_customer_sk#22, c_birth_year#26, ca_country#32]
Input [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_birth_year#26, ca_country#32, cd_demo_sk#135]

(112) BroadcastExchange
Input [3]: [c_customer_sk#22, c_birth_year#26, ca_country#32]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#136]

(113) BroadcastHashJoin [codegen id : 26]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#22]
Join condition: None

(114) Project [codegen id : 26]
Output [9]: [i_item_id#19, ca_country#32, cast(cs_quantity#5 as decimal(12,2)) AS agg1#35, cast(cs_list_price#6 as decimal(12,2)) AS agg2#36, cast(cs_coupon_amt#8 as decimal(12,2)) AS agg3#37, cast(cs_sales_price#7 as decimal(12,2)) AS agg4#38, cast(cs_net_profit#9 as decimal(12,2)) AS agg5#39, cast(c_birth_year#26 as decimal(12,2)) AS agg6#40, cast(cd_dep_count#13 as decimal(12,2)) AS agg7#41]
Input [11]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, i_item_id#19, c_customer_sk#22, c_birth_year#26, ca_country#32]

(115) HashAggregate [codegen id : 26]
Input [9]: [i_item_id#19, ca_country#32, agg1#35, agg2#36, agg3#37, agg4#38, agg5#39, agg6#40, agg7#41]
Keys [2]: [i_item_id#19, ca_country#32]
Functions [7]: [partial_avg(agg1#35), partial_avg(agg2#36), partial_avg(agg3#37), partial_avg(agg4#38), partial_avg(agg5#39), partial_avg(agg6#40), partial_avg(agg7#41)]
Aggregate Attributes [14]: [sum#137, count#138, sum#139, count#140, sum#141, count#142, sum#143, count#144, sum#145, count#146, sum#147, count#148, sum#149, count#150]
Results [16]: [i_item_id#19, ca_country#32, sum#151, count#152, sum#153, count#154, sum#155, count#156, sum#157, count#158, sum#159, count#160, sum#161, count#162, sum#163, count#164]

(116) Exchange
Input [16]: [i_item_id#19, ca_country#32, sum#151, count#152, sum#153, count#154, sum#155, count#156, sum#157, count#158, sum#159, count#160, sum#161, count#162, sum#163, count#164]
Arguments: hashpartitioning(i_item_id#19, ca_country#32, 5), ENSURE_REQUIREMENTS, [id=#165]

(117) HashAggregate [codegen id : 27]
Input [16]: [i_item_id#19, ca_country#32, sum#151, count#152, sum#153, count#154, sum#155, count#156, sum#157, count#158, sum#159, count#160, sum#161, count#162, sum#163, count#164]
Keys [2]: [i_item_id#19, ca_country#32]
Functions [7]: [avg(agg1#35), avg(agg2#36), avg(agg3#37), avg(agg4#38), avg(agg5#39), avg(agg6#40), avg(agg7#41)]
Aggregate Attributes [7]: [avg(agg1#35)#166, avg(agg2#36)#167, avg(agg3#37)#168, avg(agg4#38)#169, avg(agg5#39)#170, avg(agg6#40)#171, avg(agg7#41)#172]
Results [11]: [i_item_id#19, ca_country#32, null AS ca_state#173, null AS county#174, avg(agg1#35)#166 AS agg1#175, avg(agg2#36)#167 AS agg2#176, avg(agg3#37)#168 AS agg3#177, avg(agg4#38)#169 AS agg4#178, avg(agg5#39)#170 AS agg5#179, avg(agg6#40)#171 AS agg6#180, avg(agg7#41)#172 AS agg7#181]

(118) Scan parquet default.catalog_sales
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(119) ColumnarToRow [codegen id : 34]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]

(120) Filter [codegen id : 34]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#3) AND isnotnull(cs_bill_customer_sk#2)) AND isnotnull(cs_sold_date_sk#1)) AND isnotnull(cs_item_sk#4))

(121) ReusedExchange [Reuses operator id: 8]
Output [2]: [cd_demo_sk#10, cd_dep_count#13]

(122) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [cs_bill_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#10]
Join condition: None

(123) Project [codegen id : 34]
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13]
Input [11]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_demo_sk#10, cd_dep_count#13]

(124) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#15]

(125) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#15]
Join condition: None

(126) Project [codegen id : 34]
Output [8]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13]
Input [10]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, d_date_sk#15]

(127) Scan parquet default.customer
Output [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_month#25, c_birth_year#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [9,5,12,4,1,10]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(128) ColumnarToRow [codegen id : 31]
Input [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_month#25, c_birth_year#26]

(129) Filter [codegen id : 31]
Input [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_month#25, c_birth_year#26]
Condition : (((c_birth_month#25 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#22)) AND isnotnull(c_current_cdemo_sk#23)) AND isnotnull(c_current_addr_sk#24))

(130) Project [codegen id : 31]
Output [4]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_year#26]
Input [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_month#25, c_birth_year#26]

(131) Scan parquet default.customer_address
Output [2]: [ca_address_sk#29, ca_state#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [ND,WI,AL,NC,OK,MS,TN]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(132) ColumnarToRow [codegen id : 30]
Input [2]: [ca_address_sk#29, ca_state#31]

(133) Filter [codegen id : 30]
Input [2]: [ca_address_sk#29, ca_state#31]
Condition : (ca_state#31 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#29))

(134) Project [codegen id : 30]
Output [1]: [ca_address_sk#29]
Input [2]: [ca_address_sk#29, ca_state#31]

(135) BroadcastExchange
Input [1]: [ca_address_sk#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#182]

(136) BroadcastHashJoin [codegen id : 31]
Left keys [1]: [c_current_addr_sk#24]
Right keys [1]: [ca_address_sk#29]
Join condition: None

(137) Project [codegen id : 31]
Output [3]: [c_customer_sk#22, c_current_cdemo_sk#23, c_birth_year#26]
Input [5]: [c_customer_sk#22, c_current_cdemo_sk#23, c_current_addr_sk#24, c_birth_year#26, ca_address_sk#29]

(138) BroadcastExchange
Input [3]: [c_customer_sk#22, c_current_cdemo_sk#23, c_birth_year#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#183]

(139) Scan parquet default.customer_demographics
Output [1]: [cd_demo_sk#184]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(140) ColumnarToRow
Input [1]: [cd_demo_sk#184]

(141) Filter
Input [1]: [cd_demo_sk#184]
Condition : isnotnull(cd_demo_sk#184)

(142) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [c_current_cdemo_sk#23]
Right keys [1]: [cd_demo_sk#184]
Join condition: None

(143) Project [codegen id : 32]
Output [2]: [c_customer_sk#22, c_birth_year#26]
Input [4]: [c_customer_sk#22, c_current_cdemo_sk#23, c_birth_year#26, cd_demo_sk#184]

(144) BroadcastExchange
Input [2]: [c_customer_sk#22, c_birth_year#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#185]

(145) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#22]
Join condition: None

(146) Project [codegen id : 34]
Output [8]: [cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#26]
Input [10]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_customer_sk#22, c_birth_year#26]

(147) ReusedExchange [Reuses operator id: 21]
Output [2]: [i_item_sk#18, i_item_id#19]

(148) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#18]
Join condition: None

(149) Project [codegen id : 34]
Output [8]: [i_item_id#19, cast(cs_quantity#5 as decimal(12,2)) AS agg1#35, cast(cs_list_price#6 as decimal(12,2)) AS agg2#36, cast(cs_coupon_amt#8 as decimal(12,2)) AS agg3#37, cast(cs_sales_price#7 as decimal(12,2)) AS agg4#38, cast(cs_net_profit#9 as decimal(12,2)) AS agg5#39, cast(c_birth_year#26 as decimal(12,2)) AS agg6#40, cast(cd_dep_count#13 as decimal(12,2)) AS agg7#41]
Input [10]: [cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#26, i_item_sk#18, i_item_id#19]

(150) HashAggregate [codegen id : 34]
Input [8]: [i_item_id#19, agg1#35, agg2#36, agg3#37, agg4#38, agg5#39, agg6#40, agg7#41]
Keys [1]: [i_item_id#19]
Functions [7]: [partial_avg(agg1#35), partial_avg(agg2#36), partial_avg(agg3#37), partial_avg(agg4#38), partial_avg(agg5#39), partial_avg(agg6#40), partial_avg(agg7#41)]
Aggregate Attributes [14]: [sum#186, count#187, sum#188, count#189, sum#190, count#191, sum#192, count#193, sum#194, count#195, sum#196, count#197, sum#198, count#199]
Results [15]: [i_item_id#19, sum#200, count#201, sum#202, count#203, sum#204, count#205, sum#206, count#207, sum#208, count#209, sum#210, count#211, sum#212, count#213]

(151) Exchange
Input [15]: [i_item_id#19, sum#200, count#201, sum#202, count#203, sum#204, count#205, sum#206, count#207, sum#208, count#209, sum#210, count#211, sum#212, count#213]
Arguments: hashpartitioning(i_item_id#19, 5), ENSURE_REQUIREMENTS, [id=#214]

(152) HashAggregate [codegen id : 35]
Input [15]: [i_item_id#19, sum#200, count#201, sum#202, count#203, sum#204, count#205, sum#206, count#207, sum#208, count#209, sum#210, count#211, sum#212, count#213]
Keys [1]: [i_item_id#19]
Functions [7]: [avg(agg1#35), avg(agg2#36), avg(agg3#37), avg(agg4#38), avg(agg5#39), avg(agg6#40), avg(agg7#41)]
Aggregate Attributes [7]: [avg(agg1#35)#215, avg(agg2#36)#216, avg(agg3#37)#217, avg(agg4#38)#218, avg(agg5#39)#219, avg(agg6#40)#220, avg(agg7#41)#221]
Results [11]: [i_item_id#19, null AS ca_country#222, null AS ca_state#223, null AS county#224, avg(agg1#35)#215 AS agg1#225, avg(agg2#36)#216 AS agg2#226, avg(agg3#37)#217 AS agg3#227, avg(agg4#38)#218 AS agg4#228, avg(agg5#39)#219 AS agg5#229, avg(agg6#40)#220 AS agg6#230, avg(agg7#41)#221 AS agg7#231]

(153) Scan parquet default.catalog_sales
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(154) ColumnarToRow [codegen id : 42]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]

(155) Filter [codegen id : 42]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#3) AND isnotnull(cs_bill_customer_sk#2)) AND isnotnull(cs_sold_date_sk#1)) AND isnotnull(cs_item_sk#4))

(156) ReusedExchange [Reuses operator id: 8]
Output [2]: [cd_demo_sk#10, cd_dep_count#13]

(157) BroadcastHashJoin [codegen id : 42]
Left keys [1]: [cs_bill_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#10]
Join condition: None

(158) Project [codegen id : 42]
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13]
Input [11]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_demo_sk#10, cd_dep_count#13]

(159) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#15]

(160) BroadcastHashJoin [codegen id : 42]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#15]
Join condition: None

(161) Project [codegen id : 42]
Output [8]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13]
Input [10]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, d_date_sk#15]

(162) Scan parquet default.item
Output [1]: [i_item_sk#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(163) ColumnarToRow [codegen id : 38]
Input [1]: [i_item_sk#18]

(164) Filter [codegen id : 38]
Input [1]: [i_item_sk#18]
Condition : isnotnull(i_item_sk#18)

(165) BroadcastExchange
Input [1]: [i_item_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#232]

(166) BroadcastHashJoin [codegen id : 42]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#18]
Join condition: None

(167) Project [codegen id : 42]
Output [7]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13]
Input [9]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, i_item_sk#18]

(168) ReusedExchange [Reuses operator id: 144]
Output [2]: [c_customer_sk#22, c_birth_year#26]

(169) BroadcastHashJoin [codegen id : 42]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#22]
Join condition: None

(170) Project [codegen id : 42]
Output [7]: [cast(cs_quantity#5 as decimal(12,2)) AS agg1#35, cast(cs_list_price#6 as decimal(12,2)) AS agg2#36, cast(cs_coupon_amt#8 as decimal(12,2)) AS agg3#37, cast(cs_sales_price#7 as decimal(12,2)) AS agg4#38, cast(cs_net_profit#9 as decimal(12,2)) AS agg5#39, cast(c_birth_year#26 as decimal(12,2)) AS agg6#40, cast(cd_dep_count#13 as decimal(12,2)) AS agg7#41]
Input [9]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_customer_sk#22, c_birth_year#26]

(171) HashAggregate [codegen id : 42]
Input [7]: [agg1#35, agg2#36, agg3#37, agg4#38, agg5#39, agg6#40, agg7#41]
Keys: []
Functions [7]: [partial_avg(agg1#35), partial_avg(agg2#36), partial_avg(agg3#37), partial_avg(agg4#38), partial_avg(agg5#39), partial_avg(agg6#40), partial_avg(agg7#41)]
Aggregate Attributes [14]: [sum#233, count#234, sum#235, count#236, sum#237, count#238, sum#239, count#240, sum#241, count#242, sum#243, count#244, sum#245, count#246]
Results [14]: [sum#247, count#248, sum#249, count#250, sum#251, count#252, sum#253, count#254, sum#255, count#256, sum#257, count#258, sum#259, count#260]

(172) Exchange
Input [14]: [sum#247, count#248, sum#249, count#250, sum#251, count#252, sum#253, count#254, sum#255, count#256, sum#257, count#258, sum#259, count#260]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#261]

(173) HashAggregate [codegen id : 43]
Input [14]: [sum#247, count#248, sum#249, count#250, sum#251, count#252, sum#253, count#254, sum#255, count#256, sum#257, count#258, sum#259, count#260]
Keys: []
Functions [7]: [avg(agg1#35), avg(agg2#36), avg(agg3#37), avg(agg4#38), avg(agg5#39), avg(agg6#40), avg(agg7#41)]
Aggregate Attributes [7]: [avg(agg1#35)#262, avg(agg2#36)#263, avg(agg3#37)#264, avg(agg4#38)#265, avg(agg5#39)#266, avg(agg6#40)#267, avg(agg7#41)#268]
Results [11]: [null AS i_item_id#269, null AS ca_country#270, null AS ca_state#271, null AS county#272, avg(agg1#35)#262 AS agg1#273, avg(agg2#36)#263 AS agg2#274, avg(agg3#37)#264 AS agg3#275, avg(agg4#38)#265 AS agg4#276, avg(agg5#39)#266 AS agg5#277, avg(agg6#40)#267 AS agg6#278, avg(agg7#41)#268 AS agg7#279]

(174) Union

(175) TakeOrderedAndProject
Input [11]: [i_item_id#19, ca_country#32, ca_state#31, ca_county#30, agg1#78, agg2#79, agg3#80, agg4#81, agg5#82, agg6#83, agg7#84]
Arguments: 100, [ca_country#32 ASC NULLS FIRST, ca_state#31 ASC NULLS FIRST, ca_county#30 ASC NULLS FIRST, i_item_id#19 ASC NULLS FIRST], [i_item_id#19, ca_country#32, ca_state#31, ca_county#30, agg1#78, agg2#79, agg3#80, agg4#81, agg5#82, agg6#83, agg7#84]

