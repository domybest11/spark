== Physical Plan ==
TakeOrderedAndProject (51)
+- * Project (50)
   +- * BroadcastHashJoin Inner BuildRight (49)
      :- * Project (42)
      :  +- * BroadcastHashJoin Inner BuildRight (41)
      :     :- * Filter (32)
      :     :  +- Window (31)
      :     :     +- * Sort (30)
      :     :        +- Exchange (29)
      :     :           +- * Project (28)
      :     :              +- Window (27)
      :     :                 +- * Sort (26)
      :     :                    +- Exchange (25)
      :     :                       +- * HashAggregate (24)
      :     :                          +- Exchange (23)
      :     :                             +- * HashAggregate (22)
      :     :                                +- * Project (21)
      :     :                                   +- * BroadcastHashJoin Inner BuildRight (20)
      :     :                                      :- * Project (15)
      :     :                                      :  +- * BroadcastHashJoin Inner BuildRight (14)
      :     :                                      :     :- * Project (9)
      :     :                                      :     :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :                                      :     :     :- * Filter (3)
      :     :                                      :     :     :  +- * ColumnarToRow (2)
      :     :                                      :     :     :     +- Scan parquet default.store_sales (1)
      :     :                                      :     :     +- BroadcastExchange (7)
      :     :                                      :     :        +- * Filter (6)
      :     :                                      :     :           +- * ColumnarToRow (5)
      :     :                                      :     :              +- Scan parquet default.date_dim (4)
      :     :                                      :     +- BroadcastExchange (13)
      :     :                                      :        +- * Filter (12)
      :     :                                      :           +- * ColumnarToRow (11)
      :     :                                      :              +- Scan parquet default.store (10)
      :     :                                      +- BroadcastExchange (19)
      :     :                                         +- * Filter (18)
      :     :                                            +- * ColumnarToRow (17)
      :     :                                               +- Scan parquet default.item (16)
      :     +- BroadcastExchange (40)
      :        +- * Project (39)
      :           +- * Filter (38)
      :              +- Window (37)
      :                 +- * Sort (36)
      :                    +- Exchange (35)
      :                       +- * HashAggregate (34)
      :                          +- ReusedExchange (33)
      +- BroadcastExchange (48)
         +- * Project (47)
            +- * Filter (46)
               +- Window (45)
                  +- * Sort (44)
                     +- ReusedExchange (43)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_sales_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_sales_price#4]

(3) Filter [codegen id : 4]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_sales_price#4]
Condition : ((isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#3))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_year#6, d_moy#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [Or(Or(EqualTo(d_year,1999),And(EqualTo(d_year,1998),EqualTo(d_moy,12))),And(EqualTo(d_year,2000),EqualTo(d_moy,1))), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#6, d_moy#7]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#6, d_moy#7]
Condition : ((((d_year#6 = 1999) OR ((d_year#6 = 1998) AND (d_moy#7 = 12))) OR ((d_year#6 = 2000) AND (d_moy#7 = 1))) AND isnotnull(d_date_sk#5))

(7) BroadcastExchange
Input [3]: [d_date_sk#5, d_year#6, d_moy#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(9) Project [codegen id : 4]
Output [5]: [ss_item_sk#2, ss_store_sk#3, ss_sales_price#4, d_year#6, d_moy#7]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_sales_price#4, d_date_sk#5, d_year#6, d_moy#7]

(10) Scan parquet default.store
Output [3]: [s_store_sk#9, s_store_name#10, s_company_name#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_name), IsNotNull(s_company_name)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_company_name:string>

(11) ColumnarToRow [codegen id : 2]
Input [3]: [s_store_sk#9, s_store_name#10, s_company_name#11]

(12) Filter [codegen id : 2]
Input [3]: [s_store_sk#9, s_store_name#10, s_company_name#11]
Condition : ((isnotnull(s_store_sk#9) AND isnotnull(s_store_name#10)) AND isnotnull(s_company_name#11))

(13) BroadcastExchange
Input [3]: [s_store_sk#9, s_store_name#10, s_company_name#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#12]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#9]
Join condition: None

(15) Project [codegen id : 4]
Output [6]: [ss_item_sk#2, ss_sales_price#4, d_year#6, d_moy#7, s_store_name#10, s_company_name#11]
Input [8]: [ss_item_sk#2, ss_store_sk#3, ss_sales_price#4, d_year#6, d_moy#7, s_store_sk#9, s_store_name#10, s_company_name#11]

(16) Scan parquet default.item
Output [3]: [i_item_sk#13, i_brand#14, i_category#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_category), IsNotNull(i_brand)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>

(17) ColumnarToRow [codegen id : 3]
Input [3]: [i_item_sk#13, i_brand#14, i_category#15]

(18) Filter [codegen id : 3]
Input [3]: [i_item_sk#13, i_brand#14, i_category#15]
Condition : ((isnotnull(i_item_sk#13) AND isnotnull(i_category#15)) AND isnotnull(i_brand#14))

(19) BroadcastExchange
Input [3]: [i_item_sk#13, i_brand#14, i_category#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#16]

(20) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#13]
Join condition: None

(21) Project [codegen id : 4]
Output [7]: [i_brand#14, i_category#15, ss_sales_price#4, d_year#6, d_moy#7, s_store_name#10, s_company_name#11]
Input [9]: [ss_item_sk#2, ss_sales_price#4, d_year#6, d_moy#7, s_store_name#10, s_company_name#11, i_item_sk#13, i_brand#14, i_category#15]

(22) HashAggregate [codegen id : 4]
Input [7]: [i_brand#14, i_category#15, ss_sales_price#4, d_year#6, d_moy#7, s_store_name#10, s_company_name#11]
Keys [6]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#4))]
Aggregate Attributes [1]: [sum#17]
Results [7]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, sum#18]

(23) Exchange
Input [7]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, sum#18]
Arguments: hashpartitioning(i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, 5), ENSURE_REQUIREMENTS, [id=#19]

(24) HashAggregate [codegen id : 5]
Input [7]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, sum#18]
Keys [6]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7]
Functions [1]: [sum(UnscaledValue(ss_sales_price#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#4))#20]
Results [8]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, MakeDecimal(sum(UnscaledValue(ss_sales_price#4))#20,17,2) AS sum_sales#21, MakeDecimal(sum(UnscaledValue(ss_sales_price#4))#20,17,2) AS _w0#22]

(25) Exchange
Input [8]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, sum_sales#21, _w0#22]
Arguments: hashpartitioning(i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, 5), ENSURE_REQUIREMENTS, [id=#23]

(26) Sort [codegen id : 6]
Input [8]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, sum_sales#21, _w0#22]
Arguments: [i_category#15 ASC NULLS FIRST, i_brand#14 ASC NULLS FIRST, s_store_name#10 ASC NULLS FIRST, s_company_name#11 ASC NULLS FIRST, d_year#6 ASC NULLS FIRST], false, 0

(27) Window
Input [8]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, sum_sales#21, _w0#22]
Arguments: [avg(_w0#22) windowspecdefinition(i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#24], [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6]

(28) Project [codegen id : 7]
Output [8]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, sum_sales#21, avg_monthly_sales#24]
Input [9]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, sum_sales#21, _w0#22, avg_monthly_sales#24]

(29) Exchange
Input [8]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, sum_sales#21, avg_monthly_sales#24]
Arguments: hashpartitioning(i_category#15, i_brand#14, s_store_name#10, s_company_name#11, 5), ENSURE_REQUIREMENTS, [id=#25]

(30) Sort [codegen id : 8]
Input [8]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, sum_sales#21, avg_monthly_sales#24]
Arguments: [i_category#15 ASC NULLS FIRST, i_brand#14 ASC NULLS FIRST, s_store_name#10 ASC NULLS FIRST, s_company_name#11 ASC NULLS FIRST, d_year#6 ASC NULLS FIRST, d_moy#7 ASC NULLS FIRST], false, 0

(31) Window
Input [8]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, sum_sales#21, avg_monthly_sales#24]
Arguments: [rank(d_year#6, d_moy#7) windowspecdefinition(i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6 ASC NULLS FIRST, d_moy#7 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#26], [i_category#15, i_brand#14, s_store_name#10, s_company_name#11], [d_year#6 ASC NULLS FIRST, d_moy#7 ASC NULLS FIRST]

(32) Filter [codegen id : 23]
Input [9]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, sum_sales#21, avg_monthly_sales#24, rn#26]
Condition : (((((isnotnull(d_year#6) AND isnotnull(avg_monthly_sales#24)) AND (d_year#6 = 1999)) AND (avg_monthly_sales#24 > 0.000000)) AND (CASE WHEN (avg_monthly_sales#24 > 0.000000) THEN CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#21 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#24 as decimal(22,6)))), DecimalType(22,6), true))) / promote_precision(cast(avg_monthly_sales#24 as decimal(22,6)))), DecimalType(38,16), true) ELSE null END > 0.1000000000000000)) AND isnotnull(rn#26))

(33) ReusedExchange [Reuses operator id: 23]
Output [7]: [i_category#27, i_brand#28, s_store_name#29, s_company_name#30, d_year#31, d_moy#32, sum#33]

(34) HashAggregate [codegen id : 13]
Input [7]: [i_category#27, i_brand#28, s_store_name#29, s_company_name#30, d_year#31, d_moy#32, sum#33]
Keys [6]: [i_category#27, i_brand#28, s_store_name#29, s_company_name#30, d_year#31, d_moy#32]
Functions [1]: [sum(UnscaledValue(ss_sales_price#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#4))#34]
Results [7]: [i_category#27, i_brand#28, s_store_name#29, s_company_name#30, d_year#31, d_moy#32, MakeDecimal(sum(UnscaledValue(ss_sales_price#4))#34,17,2) AS sum_sales#35]

(35) Exchange
Input [7]: [i_category#27, i_brand#28, s_store_name#29, s_company_name#30, d_year#31, d_moy#32, sum_sales#35]
Arguments: hashpartitioning(i_category#27, i_brand#28, s_store_name#29, s_company_name#30, 5), ENSURE_REQUIREMENTS, [id=#36]

(36) Sort [codegen id : 14]
Input [7]: [i_category#27, i_brand#28, s_store_name#29, s_company_name#30, d_year#31, d_moy#32, sum_sales#35]
Arguments: [i_category#27 ASC NULLS FIRST, i_brand#28 ASC NULLS FIRST, s_store_name#29 ASC NULLS FIRST, s_company_name#30 ASC NULLS FIRST, d_year#31 ASC NULLS FIRST, d_moy#32 ASC NULLS FIRST], false, 0

(37) Window
Input [7]: [i_category#27, i_brand#28, s_store_name#29, s_company_name#30, d_year#31, d_moy#32, sum_sales#35]
Arguments: [rank(d_year#31, d_moy#32) windowspecdefinition(i_category#27, i_brand#28, s_store_name#29, s_company_name#30, d_year#31 ASC NULLS FIRST, d_moy#32 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#37], [i_category#27, i_brand#28, s_store_name#29, s_company_name#30], [d_year#31 ASC NULLS FIRST, d_moy#32 ASC NULLS FIRST]

(38) Filter [codegen id : 15]
Input [8]: [i_category#27, i_brand#28, s_store_name#29, s_company_name#30, d_year#31, d_moy#32, sum_sales#35, rn#37]
Condition : isnotnull(rn#37)

(39) Project [codegen id : 15]
Output [6]: [i_category#27, i_brand#28, s_store_name#29, s_company_name#30, sum_sales#35, rn#37]
Input [8]: [i_category#27, i_brand#28, s_store_name#29, s_company_name#30, d_year#31, d_moy#32, sum_sales#35, rn#37]

(40) BroadcastExchange
Input [6]: [i_category#27, i_brand#28, s_store_name#29, s_company_name#30, sum_sales#35, rn#37]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], input[3, string, true], (input[5, int, true] + 1)),false), [id=#38]

(41) BroadcastHashJoin [codegen id : 23]
Left keys [5]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, rn#26]
Right keys [5]: [i_category#27, i_brand#28, s_store_name#29, s_company_name#30, (rn#37 + 1)]
Join condition: None

(42) Project [codegen id : 23]
Output [10]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, sum_sales#21, avg_monthly_sales#24, rn#26, sum_sales#35]
Input [15]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, sum_sales#21, avg_monthly_sales#24, rn#26, i_category#27, i_brand#28, s_store_name#29, s_company_name#30, sum_sales#35, rn#37]

(43) ReusedExchange [Reuses operator id: 35]
Output [7]: [i_category#39, i_brand#40, s_store_name#41, s_company_name#42, d_year#43, d_moy#44, sum_sales#45]

(44) Sort [codegen id : 21]
Input [7]: [i_category#39, i_brand#40, s_store_name#41, s_company_name#42, d_year#43, d_moy#44, sum_sales#45]
Arguments: [i_category#39 ASC NULLS FIRST, i_brand#40 ASC NULLS FIRST, s_store_name#41 ASC NULLS FIRST, s_company_name#42 ASC NULLS FIRST, d_year#43 ASC NULLS FIRST, d_moy#44 ASC NULLS FIRST], false, 0

(45) Window
Input [7]: [i_category#39, i_brand#40, s_store_name#41, s_company_name#42, d_year#43, d_moy#44, sum_sales#45]
Arguments: [rank(d_year#43, d_moy#44) windowspecdefinition(i_category#39, i_brand#40, s_store_name#41, s_company_name#42, d_year#43 ASC NULLS FIRST, d_moy#44 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#46], [i_category#39, i_brand#40, s_store_name#41, s_company_name#42], [d_year#43 ASC NULLS FIRST, d_moy#44 ASC NULLS FIRST]

(46) Filter [codegen id : 22]
Input [8]: [i_category#39, i_brand#40, s_store_name#41, s_company_name#42, d_year#43, d_moy#44, sum_sales#45, rn#46]
Condition : isnotnull(rn#46)

(47) Project [codegen id : 22]
Output [6]: [i_category#39, i_brand#40, s_store_name#41, s_company_name#42, sum_sales#45, rn#46]
Input [8]: [i_category#39, i_brand#40, s_store_name#41, s_company_name#42, d_year#43, d_moy#44, sum_sales#45, rn#46]

(48) BroadcastExchange
Input [6]: [i_category#39, i_brand#40, s_store_name#41, s_company_name#42, sum_sales#45, rn#46]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], input[3, string, true], (input[5, int, true] - 1)),false), [id=#47]

(49) BroadcastHashJoin [codegen id : 23]
Left keys [5]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, rn#26]
Right keys [5]: [i_category#39, i_brand#40, s_store_name#41, s_company_name#42, (rn#46 - 1)]
Join condition: None

(50) Project [codegen id : 23]
Output [10]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, avg_monthly_sales#24, sum_sales#21, sum_sales#35 AS psum#48, sum_sales#45 AS nsum#49]
Input [16]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, sum_sales#21, avg_monthly_sales#24, rn#26, sum_sales#35, i_category#39, i_brand#40, s_store_name#41, s_company_name#42, sum_sales#45, rn#46]

(51) TakeOrderedAndProject
Input [10]: [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, avg_monthly_sales#24, sum_sales#21, psum#48, nsum#49]
Arguments: 100, [CheckOverflow((promote_precision(cast(sum_sales#21 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#24 as decimal(22,6)))), DecimalType(22,6), true) ASC NULLS FIRST, s_store_name#10 ASC NULLS FIRST], [i_category#15, i_brand#14, s_store_name#10, s_company_name#11, d_year#6, d_moy#7, avg_monthly_sales#24, sum_sales#21, psum#48, nsum#49]

