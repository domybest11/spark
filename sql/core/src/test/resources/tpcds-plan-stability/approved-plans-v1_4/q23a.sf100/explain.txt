== Physical Plan ==
* HashAggregate (77)
+- Exchange (76)
   +- * HashAggregate (75)
      +- Union (74)
         :- * Project (54)
         :  +- * BroadcastHashJoin Inner BuildRight (53)
         :     :- * Project (47)
         :     :  +- * BroadcastHashJoin LeftSemi BuildRight (46)
         :     :     :- * Project (30)
         :     :     :  +- SortMergeJoin LeftSemi (29)
         :     :     :     :- * Sort (5)
         :     :     :     :  +- Exchange (4)
         :     :     :     :     +- * Filter (3)
         :     :     :     :        +- * ColumnarToRow (2)
         :     :     :     :           +- Scan parquet default.catalog_sales (1)
         :     :     :     +- * Sort (28)
         :     :     :        +- Exchange (27)
         :     :     :           +- * Project (26)
         :     :     :              +- * Filter (25)
         :     :     :                 +- * HashAggregate (24)
         :     :     :                    +- Exchange (23)
         :     :     :                       +- * HashAggregate (22)
         :     :     :                          +- * Project (21)
         :     :     :                             +- * BroadcastHashJoin Inner BuildRight (20)
         :     :     :                                :- * Project (15)
         :     :     :                                :  +- * BroadcastHashJoin Inner BuildRight (14)
         :     :     :                                :     :- * Filter (8)
         :     :     :                                :     :  +- * ColumnarToRow (7)
         :     :     :                                :     :     +- Scan parquet default.store_sales (6)
         :     :     :                                :     +- BroadcastExchange (13)
         :     :     :                                :        +- * Project (12)
         :     :     :                                :           +- * Filter (11)
         :     :     :                                :              +- * ColumnarToRow (10)
         :     :     :                                :                 +- Scan parquet default.date_dim (9)
         :     :     :                                +- BroadcastExchange (19)
         :     :     :                                   +- * Filter (18)
         :     :     :                                      +- * ColumnarToRow (17)
         :     :     :                                         +- Scan parquet default.item (16)
         :     :     +- BroadcastExchange (45)
         :     :        +- * Project (44)
         :     :           +- * Filter (43)
         :     :              +- * HashAggregate (42)
         :     :                 +- Exchange (41)
         :     :                    +- * HashAggregate (40)
         :     :                       +- * Project (39)
         :     :                          +- * BroadcastHashJoin Inner BuildRight (38)
         :     :                             :- * Filter (33)
         :     :                             :  +- * ColumnarToRow (32)
         :     :                             :     +- Scan parquet default.store_sales (31)
         :     :                             +- BroadcastExchange (37)
         :     :                                +- * Filter (36)
         :     :                                   +- * ColumnarToRow (35)
         :     :                                      +- Scan parquet default.customer (34)
         :     +- BroadcastExchange (52)
         :        +- * Project (51)
         :           +- * Filter (50)
         :              +- * ColumnarToRow (49)
         :                 +- Scan parquet default.date_dim (48)
         +- * Project (73)
            +- * BroadcastHashJoin Inner BuildRight (72)
               :- * Project (70)
               :  +- * BroadcastHashJoin LeftSemi BuildRight (69)
               :     :- * Project (63)
               :     :  +- SortMergeJoin LeftSemi (62)
               :     :     :- * Sort (59)
               :     :     :  +- Exchange (58)
               :     :     :     +- * Filter (57)
               :     :     :        +- * ColumnarToRow (56)
               :     :     :           +- Scan parquet default.web_sales (55)
               :     :     +- * Sort (61)
               :     :        +- ReusedExchange (60)
               :     +- BroadcastExchange (68)
               :        +- * Project (67)
               :           +- * Filter (66)
               :              +- * HashAggregate (65)
               :                 +- ReusedExchange (64)
               +- ReusedExchange (71)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Condition : isnotnull(cs_sold_date_sk#1)

(4) Exchange
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Arguments: hashpartitioning(cs_item_sk#3, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Arguments: [cs_item_sk#3 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#7, ss_item_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(7) ColumnarToRow [codegen id : 5]
Input [2]: [ss_sold_date_sk#7, ss_item_sk#8]

(8) Filter [codegen id : 5]
Input [2]: [ss_sold_date_sk#7, ss_item_sk#8]
Condition : (isnotnull(ss_sold_date_sk#7) AND isnotnull(ss_item_sk#8))

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_date#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(10) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#9, d_date#10, d_year#11]

(11) Filter [codegen id : 3]
Input [3]: [d_date_sk#9, d_date#10, d_year#11]
Condition : (d_year#11 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#9))

(12) Project [codegen id : 3]
Output [2]: [d_date_sk#9, d_date#10]
Input [3]: [d_date_sk#9, d_date#10, d_year#11]

(13) BroadcastExchange
Input [2]: [d_date_sk#9, d_date#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(14) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join condition: None

(15) Project [codegen id : 5]
Output [2]: [ss_item_sk#8, d_date#10]
Input [4]: [ss_sold_date_sk#7, ss_item_sk#8, d_date_sk#9, d_date#10]

(16) Scan parquet default.item
Output [2]: [i_item_sk#13, i_item_desc#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(17) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#13, i_item_desc#14]

(18) Filter [codegen id : 4]
Input [2]: [i_item_sk#13, i_item_desc#14]
Condition : isnotnull(i_item_sk#13)

(19) BroadcastExchange
Input [2]: [i_item_sk#13, i_item_desc#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15]

(20) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#13]
Join condition: None

(21) Project [codegen id : 5]
Output [3]: [d_date#10, i_item_sk#13, i_item_desc#14]
Input [4]: [ss_item_sk#8, d_date#10, i_item_sk#13, i_item_desc#14]

(22) HashAggregate [codegen id : 5]
Input [3]: [d_date#10, i_item_sk#13, i_item_desc#14]
Keys [3]: [substr(i_item_desc#14, 1, 30) AS substr(i_item_desc#14, 1, 30)#16, i_item_sk#13, d_date#10]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#17]
Results [4]: [substr(i_item_desc#14, 1, 30)#16, i_item_sk#13, d_date#10, count#18]

(23) Exchange
Input [4]: [substr(i_item_desc#14, 1, 30)#16, i_item_sk#13, d_date#10, count#18]
Arguments: hashpartitioning(substr(i_item_desc#14, 1, 30)#16, i_item_sk#13, d_date#10, 5), ENSURE_REQUIREMENTS, [id=#19]

(24) HashAggregate [codegen id : 6]
Input [4]: [substr(i_item_desc#14, 1, 30)#16, i_item_sk#13, d_date#10, count#18]
Keys [3]: [substr(i_item_desc#14, 1, 30)#16, i_item_sk#13, d_date#10]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#13 AS item_sk#21, count(1)#20 AS count(1)#22]

(25) Filter [codegen id : 6]
Input [2]: [item_sk#21, count(1)#22]
Condition : (count(1)#22 > 4)

(26) Project [codegen id : 6]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, count(1)#22]

(27) Exchange
Input [1]: [item_sk#21]
Arguments: hashpartitioning(item_sk#21, 5), ENSURE_REQUIREMENTS, [id=#23]

(28) Sort [codegen id : 7]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(29) SortMergeJoin
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [item_sk#21]
Join condition: None

(30) Project [codegen id : 12]
Output [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(31) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(32) ColumnarToRow [codegen id : 9]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(33) Filter [codegen id : 9]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Condition : isnotnull(ss_customer_sk#24)

(34) Scan parquet default.customer
Output [1]: [c_customer_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(35) ColumnarToRow [codegen id : 8]
Input [1]: [c_customer_sk#27]

(36) Filter [codegen id : 8]
Input [1]: [c_customer_sk#27]
Condition : isnotnull(c_customer_sk#27)

(37) BroadcastExchange
Input [1]: [c_customer_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(38) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(39) Project [codegen id : 9]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#27]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#27]

(40) HashAggregate [codegen id : 9]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#27]
Keys [1]: [c_customer_sk#27]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#29, isEmpty#30]
Results [3]: [c_customer_sk#27, sum#31, isEmpty#32]

(41) Exchange
Input [3]: [c_customer_sk#27, sum#31, isEmpty#32]
Arguments: hashpartitioning(c_customer_sk#27, 5), ENSURE_REQUIREMENTS, [id=#33]

(42) HashAggregate [codegen id : 10]
Input [3]: [c_customer_sk#27, sum#31, isEmpty#32]
Keys [1]: [c_customer_sk#27]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#34]
Results [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#34 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]

(43) Filter [codegen id : 10]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#36, [id=#37] as decimal(32,6)))), DecimalType(38,8), true)))

(44) Project [codegen id : 10]
Output [1]: [c_customer_sk#27]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]

(45) BroadcastExchange
Input [1]: [c_customer_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#38]

(46) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(47) Project [codegen id : 12]
Output [3]: [cs_sold_date_sk#1, cs_quantity#4, cs_list_price#5]
Input [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]

(48) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#11, d_moy#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(49) ColumnarToRow [codegen id : 11]
Input [3]: [d_date_sk#9, d_year#11, d_moy#39]

(50) Filter [codegen id : 11]
Input [3]: [d_date_sk#9, d_year#11, d_moy#39]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#39)) AND (d_year#11 = 2000)) AND (d_moy#39 = 2)) AND isnotnull(d_date_sk#9))

(51) Project [codegen id : 11]
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#11, d_moy#39]

(52) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40]

(53) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(54) Project [codegen id : 12]
Output [1]: [CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true) AS sales#41]
Input [4]: [cs_sold_date_sk#1, cs_quantity#4, cs_list_price#5, d_date_sk#9]

(55) Scan parquet default.web_sales
Output [5]: [ws_sold_date_sk#42, ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(56) ColumnarToRow [codegen id : 13]
Input [5]: [ws_sold_date_sk#42, ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46]

(57) Filter [codegen id : 13]
Input [5]: [ws_sold_date_sk#42, ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46]
Condition : isnotnull(ws_sold_date_sk#42)

(58) Exchange
Input [5]: [ws_sold_date_sk#42, ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46]
Arguments: hashpartitioning(ws_item_sk#43, 5), ENSURE_REQUIREMENTS, [id=#47]

(59) Sort [codegen id : 14]
Input [5]: [ws_sold_date_sk#42, ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46]
Arguments: [ws_item_sk#43 ASC NULLS FIRST], false, 0

(60) ReusedExchange [Reuses operator id: 27]
Output [1]: [item_sk#21]

(61) Sort [codegen id : 19]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(62) SortMergeJoin
Left keys [1]: [ws_item_sk#43]
Right keys [1]: [item_sk#21]
Join condition: None

(63) Project [codegen id : 24]
Output [4]: [ws_sold_date_sk#42, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46]
Input [5]: [ws_sold_date_sk#42, ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46]

(64) ReusedExchange [Reuses operator id: 41]
Output [3]: [c_customer_sk#27, sum#48, isEmpty#49]

(65) HashAggregate [codegen id : 22]
Input [3]: [c_customer_sk#27, sum#48, isEmpty#49]
Keys [1]: [c_customer_sk#27]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#50]
Results [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#50 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#51]

(66) Filter [codegen id : 22]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#51]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#51) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#51 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#36, [id=#37] as decimal(32,6)))), DecimalType(38,8), true)))

(67) Project [codegen id : 22]
Output [1]: [c_customer_sk#27]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#51]

(68) BroadcastExchange
Input [1]: [c_customer_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#52]

(69) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [ws_bill_customer_sk#44]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(70) Project [codegen id : 24]
Output [3]: [ws_sold_date_sk#42, ws_quantity#45, ws_list_price#46]
Input [4]: [ws_sold_date_sk#42, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46]

(71) ReusedExchange [Reuses operator id: 52]
Output [1]: [d_date_sk#9]

(72) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [ws_sold_date_sk#42]
Right keys [1]: [d_date_sk#9]
Join condition: None

(73) Project [codegen id : 24]
Output [1]: [CheckOverflow((promote_precision(cast(cast(ws_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#46 as decimal(12,2)))), DecimalType(18,2), true) AS sales#53]
Input [4]: [ws_sold_date_sk#42, ws_quantity#45, ws_list_price#46, d_date_sk#9]

(74) Union

(75) HashAggregate [codegen id : 25]
Input [1]: [sales#41]
Keys: []
Functions [1]: [partial_sum(sales#41)]
Aggregate Attributes [2]: [sum#54, isEmpty#55]
Results [2]: [sum#56, isEmpty#57]

(76) Exchange
Input [2]: [sum#56, isEmpty#57]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#58]

(77) HashAggregate [codegen id : 26]
Input [2]: [sum#56, isEmpty#57]
Keys: []
Functions [1]: [sum(sales#41)]
Aggregate Attributes [1]: [sum(sales#41)#59]
Results [1]: [sum(sales#41)#59 AS sum(sales)#60]

===== Subqueries =====

Subquery:1 Hosting operator id = 43 Hosting Expression = Subquery scalar-subquery#36, [id=#37]
* HashAggregate (99)
+- Exchange (98)
   +- * HashAggregate (97)
      +- * HashAggregate (96)
         +- Exchange (95)
            +- * HashAggregate (94)
               +- * Project (93)
                  +- * BroadcastHashJoin Inner BuildRight (92)
                     :- * Project (87)
                     :  +- * BroadcastHashJoin Inner BuildRight (86)
                     :     :- * Filter (80)
                     :     :  +- * ColumnarToRow (79)
                     :     :     +- Scan parquet default.store_sales (78)
                     :     +- BroadcastExchange (85)
                     :        +- * Project (84)
                     :           +- * Filter (83)
                     :              +- * ColumnarToRow (82)
                     :                 +- Scan parquet default.date_dim (81)
                     +- BroadcastExchange (91)
                        +- * Filter (90)
                           +- * ColumnarToRow (89)
                              +- Scan parquet default.customer (88)


(78) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#7, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(79) ColumnarToRow [codegen id : 3]
Input [4]: [ss_sold_date_sk#7, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(80) Filter [codegen id : 3]
Input [4]: [ss_sold_date_sk#7, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Condition : (isnotnull(ss_customer_sk#24) AND isnotnull(ss_sold_date_sk#7))

(81) Scan parquet default.date_dim
Output [2]: [d_date_sk#9, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(82) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#11]

(83) Filter [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#11]
Condition : (d_year#11 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#9))

(84) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [2]: [d_date_sk#9, d_year#11]

(85) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#61]

(86) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join condition: None

(87) Project [codegen id : 3]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Input [5]: [ss_sold_date_sk#7, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, d_date_sk#9]

(88) Scan parquet default.customer
Output [1]: [c_customer_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(89) ColumnarToRow [codegen id : 2]
Input [1]: [c_customer_sk#27]

(90) Filter [codegen id : 2]
Input [1]: [c_customer_sk#27]
Condition : isnotnull(c_customer_sk#27)

(91) BroadcastExchange
Input [1]: [c_customer_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#62]

(92) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(93) Project [codegen id : 3]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#27]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#27]

(94) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#27]
Keys [1]: [c_customer_sk#27]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#63, isEmpty#64]
Results [3]: [c_customer_sk#27, sum#65, isEmpty#66]

(95) Exchange
Input [3]: [c_customer_sk#27, sum#65, isEmpty#66]
Arguments: hashpartitioning(c_customer_sk#27, 5), ENSURE_REQUIREMENTS, [id=#67]

(96) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#27, sum#65, isEmpty#66]
Keys [1]: [c_customer_sk#27]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#68]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#68 AS csales#69]

(97) HashAggregate [codegen id : 4]
Input [1]: [csales#69]
Keys: []
Functions [1]: [partial_max(csales#69)]
Aggregate Attributes [1]: [max#70]
Results [1]: [max#71]

(98) Exchange
Input [1]: [max#71]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#72]

(99) HashAggregate [codegen id : 5]
Input [1]: [max#71]
Keys: []
Functions [1]: [max(csales#69)]
Aggregate Attributes [1]: [max(csales#69)#73]
Results [1]: [max(csales#69)#73 AS tpcds_cmax#74]

Subquery:2 Hosting operator id = 66 Hosting Expression = ReusedSubquery Subquery scalar-subquery#36, [id=#37]


