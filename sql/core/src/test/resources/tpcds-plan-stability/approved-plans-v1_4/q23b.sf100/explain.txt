== Physical Plan ==
TakeOrderedAndProject (109)
+- Union (108)
   :- * HashAggregate (71)
   :  +- Exchange (70)
   :     +- * HashAggregate (69)
   :        +- * Project (68)
   :           +- SortMergeJoin Inner (67)
   :              :- * Sort (55)
   :              :  +- Exchange (54)
   :              :     +- * Project (53)
   :              :        +- * BroadcastHashJoin Inner BuildRight (52)
   :              :           :- * BroadcastHashJoin LeftSemi BuildRight (46)
   :              :           :  :- * Project (30)
   :              :           :  :  +- SortMergeJoin LeftSemi (29)
   :              :           :  :     :- * Sort (5)
   :              :           :  :     :  +- Exchange (4)
   :              :           :  :     :     +- * Filter (3)
   :              :           :  :     :        +- * ColumnarToRow (2)
   :              :           :  :     :           +- Scan parquet default.catalog_sales (1)
   :              :           :  :     +- * Sort (28)
   :              :           :  :        +- Exchange (27)
   :              :           :  :           +- * Project (26)
   :              :           :  :              +- * Filter (25)
   :              :           :  :                 +- * HashAggregate (24)
   :              :           :  :                    +- Exchange (23)
   :              :           :  :                       +- * HashAggregate (22)
   :              :           :  :                          +- * Project (21)
   :              :           :  :                             +- * BroadcastHashJoin Inner BuildRight (20)
   :              :           :  :                                :- * Project (15)
   :              :           :  :                                :  +- * BroadcastHashJoin Inner BuildRight (14)
   :              :           :  :                                :     :- * Filter (8)
   :              :           :  :                                :     :  +- * ColumnarToRow (7)
   :              :           :  :                                :     :     +- Scan parquet default.store_sales (6)
   :              :           :  :                                :     +- BroadcastExchange (13)
   :              :           :  :                                :        +- * Project (12)
   :              :           :  :                                :           +- * Filter (11)
   :              :           :  :                                :              +- * ColumnarToRow (10)
   :              :           :  :                                :                 +- Scan parquet default.date_dim (9)
   :              :           :  :                                +- BroadcastExchange (19)
   :              :           :  :                                   +- * Filter (18)
   :              :           :  :                                      +- * ColumnarToRow (17)
   :              :           :  :                                         +- Scan parquet default.item (16)
   :              :           :  +- BroadcastExchange (45)
   :              :           :     +- * Project (44)
   :              :           :        +- * Filter (43)
   :              :           :           +- * HashAggregate (42)
   :              :           :              +- Exchange (41)
   :              :           :                 +- * HashAggregate (40)
   :              :           :                    +- * Project (39)
   :              :           :                       +- * BroadcastHashJoin Inner BuildRight (38)
   :              :           :                          :- * Filter (33)
   :              :           :                          :  +- * ColumnarToRow (32)
   :              :           :                          :     +- Scan parquet default.store_sales (31)
   :              :           :                          +- BroadcastExchange (37)
   :              :           :                             +- * Filter (36)
   :              :           :                                +- * ColumnarToRow (35)
   :              :           :                                   +- Scan parquet default.customer (34)
   :              :           +- BroadcastExchange (51)
   :              :              +- * Project (50)
   :              :                 +- * Filter (49)
   :              :                    +- * ColumnarToRow (48)
   :              :                       +- Scan parquet default.date_dim (47)
   :              +- * Sort (66)
   :                 +- Exchange (65)
   :                    +- * BroadcastHashJoin LeftSemi BuildRight (64)
   :                       :- * Filter (58)
   :                       :  +- * ColumnarToRow (57)
   :                       :     +- Scan parquet default.customer (56)
   :                       +- BroadcastExchange (63)
   :                          +- * Project (62)
   :                             +- * Filter (61)
   :                                +- * HashAggregate (60)
   :                                   +- ReusedExchange (59)
   +- * HashAggregate (107)
      +- Exchange (106)
         +- * HashAggregate (105)
            +- * Project (104)
               +- SortMergeJoin Inner (103)
                  :- * Sort (91)
                  :  +- Exchange (90)
                  :     +- * Project (89)
                  :        +- * BroadcastHashJoin Inner BuildRight (88)
                  :           :- * BroadcastHashJoin LeftSemi BuildRight (86)
                  :           :  :- * Project (80)
                  :           :  :  +- SortMergeJoin LeftSemi (79)
                  :           :  :     :- * Sort (76)
                  :           :  :     :  +- Exchange (75)
                  :           :  :     :     +- * Filter (74)
                  :           :  :     :        +- * ColumnarToRow (73)
                  :           :  :     :           +- Scan parquet default.web_sales (72)
                  :           :  :     +- * Sort (78)
                  :           :  :        +- ReusedExchange (77)
                  :           :  +- BroadcastExchange (85)
                  :           :     +- * Project (84)
                  :           :        +- * Filter (83)
                  :           :           +- * HashAggregate (82)
                  :           :              +- ReusedExchange (81)
                  :           +- ReusedExchange (87)
                  +- * Sort (102)
                     +- Exchange (101)
                        +- * BroadcastHashJoin LeftSemi BuildRight (100)
                           :- * Filter (94)
                           :  +- * ColumnarToRow (93)
                           :     +- Scan parquet default.customer (92)
                           +- BroadcastExchange (99)
                              +- * Project (98)
                                 +- * Filter (97)
                                    +- * HashAggregate (96)
                                       +- ReusedExchange (95)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Condition : (isnotnull(cs_bill_customer_sk#2) AND isnotnull(cs_sold_date_sk#1))

(4) Exchange
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Arguments: hashpartitioning(cs_item_sk#3, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Arguments: [cs_item_sk#3 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#7, ss_item_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(7) ColumnarToRow [codegen id : 5]
Input [2]: [ss_sold_date_sk#7, ss_item_sk#8]

(8) Filter [codegen id : 5]
Input [2]: [ss_sold_date_sk#7, ss_item_sk#8]
Condition : (isnotnull(ss_sold_date_sk#7) AND isnotnull(ss_item_sk#8))

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_date#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(10) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#9, d_date#10, d_year#11]

(11) Filter [codegen id : 3]
Input [3]: [d_date_sk#9, d_date#10, d_year#11]
Condition : (d_year#11 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#9))

(12) Project [codegen id : 3]
Output [2]: [d_date_sk#9, d_date#10]
Input [3]: [d_date_sk#9, d_date#10, d_year#11]

(13) BroadcastExchange
Input [2]: [d_date_sk#9, d_date#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(14) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join condition: None

(15) Project [codegen id : 5]
Output [2]: [ss_item_sk#8, d_date#10]
Input [4]: [ss_sold_date_sk#7, ss_item_sk#8, d_date_sk#9, d_date#10]

(16) Scan parquet default.item
Output [2]: [i_item_sk#13, i_item_desc#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(17) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#13, i_item_desc#14]

(18) Filter [codegen id : 4]
Input [2]: [i_item_sk#13, i_item_desc#14]
Condition : isnotnull(i_item_sk#13)

(19) BroadcastExchange
Input [2]: [i_item_sk#13, i_item_desc#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15]

(20) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#13]
Join condition: None

(21) Project [codegen id : 5]
Output [3]: [d_date#10, i_item_sk#13, i_item_desc#14]
Input [4]: [ss_item_sk#8, d_date#10, i_item_sk#13, i_item_desc#14]

(22) HashAggregate [codegen id : 5]
Input [3]: [d_date#10, i_item_sk#13, i_item_desc#14]
Keys [3]: [substr(i_item_desc#14, 1, 30) AS substr(i_item_desc#14, 1, 30)#16, i_item_sk#13, d_date#10]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#17]
Results [4]: [substr(i_item_desc#14, 1, 30)#16, i_item_sk#13, d_date#10, count#18]

(23) Exchange
Input [4]: [substr(i_item_desc#14, 1, 30)#16, i_item_sk#13, d_date#10, count#18]
Arguments: hashpartitioning(substr(i_item_desc#14, 1, 30)#16, i_item_sk#13, d_date#10, 5), ENSURE_REQUIREMENTS, [id=#19]

(24) HashAggregate [codegen id : 6]
Input [4]: [substr(i_item_desc#14, 1, 30)#16, i_item_sk#13, d_date#10, count#18]
Keys [3]: [substr(i_item_desc#14, 1, 30)#16, i_item_sk#13, d_date#10]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#13 AS item_sk#21, count(1)#20 AS count(1)#22]

(25) Filter [codegen id : 6]
Input [2]: [item_sk#21, count(1)#22]
Condition : (count(1)#22 > 4)

(26) Project [codegen id : 6]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, count(1)#22]

(27) Exchange
Input [1]: [item_sk#21]
Arguments: hashpartitioning(item_sk#21, 5), ENSURE_REQUIREMENTS, [id=#23]

(28) Sort [codegen id : 7]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(29) SortMergeJoin
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [item_sk#21]
Join condition: None

(30) Project [codegen id : 12]
Output [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(31) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(32) ColumnarToRow [codegen id : 9]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(33) Filter [codegen id : 9]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Condition : isnotnull(ss_customer_sk#24)

(34) Scan parquet default.customer
Output [1]: [c_customer_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(35) ColumnarToRow [codegen id : 8]
Input [1]: [c_customer_sk#27]

(36) Filter [codegen id : 8]
Input [1]: [c_customer_sk#27]
Condition : isnotnull(c_customer_sk#27)

(37) BroadcastExchange
Input [1]: [c_customer_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(38) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(39) Project [codegen id : 9]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#27]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#27]

(40) HashAggregate [codegen id : 9]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#27]
Keys [1]: [c_customer_sk#27]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#29, isEmpty#30]
Results [3]: [c_customer_sk#27, sum#31, isEmpty#32]

(41) Exchange
Input [3]: [c_customer_sk#27, sum#31, isEmpty#32]
Arguments: hashpartitioning(c_customer_sk#27, 5), ENSURE_REQUIREMENTS, [id=#33]

(42) HashAggregate [codegen id : 10]
Input [3]: [c_customer_sk#27, sum#31, isEmpty#32]
Keys [1]: [c_customer_sk#27]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#34]
Results [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#34 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]

(43) Filter [codegen id : 10]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#36, [id=#37] as decimal(32,6)))), DecimalType(38,8), true)))

(44) Project [codegen id : 10]
Output [1]: [c_customer_sk#27]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]

(45) BroadcastExchange
Input [1]: [c_customer_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#38]

(46) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(47) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#11, d_moy#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(48) ColumnarToRow [codegen id : 11]
Input [3]: [d_date_sk#9, d_year#11, d_moy#39]

(49) Filter [codegen id : 11]
Input [3]: [d_date_sk#9, d_year#11, d_moy#39]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#39)) AND (d_year#11 = 2000)) AND (d_moy#39 = 2)) AND isnotnull(d_date_sk#9))

(50) Project [codegen id : 11]
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#11, d_moy#39]

(51) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40]

(52) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(53) Project [codegen id : 12]
Output [3]: [cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5, d_date_sk#9]

(54) Exchange
Input [3]: [cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Arguments: hashpartitioning(cs_bill_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#41]

(55) Sort [codegen id : 13]
Input [3]: [cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Arguments: [cs_bill_customer_sk#2 ASC NULLS FIRST], false, 0

(56) Scan parquet default.customer
Output [3]: [c_customer_sk#27, c_first_name#42, c_last_name#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(57) ColumnarToRow [codegen id : 17]
Input [3]: [c_customer_sk#27, c_first_name#42, c_last_name#43]

(58) Filter [codegen id : 17]
Input [3]: [c_customer_sk#27, c_first_name#42, c_last_name#43]
Condition : isnotnull(c_customer_sk#27)

(59) ReusedExchange [Reuses operator id: 41]
Output [3]: [c_customer_sk#27, sum#31, isEmpty#32]

(60) HashAggregate [codegen id : 16]
Input [3]: [c_customer_sk#27, sum#31, isEmpty#32]
Keys [1]: [c_customer_sk#27]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#34]
Results [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#34 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]

(61) Filter [codegen id : 16]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#36, [id=#37] as decimal(32,6)))), DecimalType(38,8), true)))

(62) Project [codegen id : 16]
Output [1]: [c_customer_sk#27 AS c_customer_sk#27#44]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]

(63) BroadcastExchange
Input [1]: [c_customer_sk#27#44]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#45]

(64) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [c_customer_sk#27]
Right keys [1]: [c_customer_sk#27#44]
Join condition: None

(65) Exchange
Input [3]: [c_customer_sk#27, c_first_name#42, c_last_name#43]
Arguments: hashpartitioning(c_customer_sk#27, 5), ENSURE_REQUIREMENTS, [id=#46]

(66) Sort [codegen id : 18]
Input [3]: [c_customer_sk#27, c_first_name#42, c_last_name#43]
Arguments: [c_customer_sk#27 ASC NULLS FIRST], false, 0

(67) SortMergeJoin
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(68) Project [codegen id : 19]
Output [4]: [cs_quantity#4, cs_list_price#5, c_first_name#42, c_last_name#43]
Input [6]: [cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5, c_customer_sk#27, c_first_name#42, c_last_name#43]

(69) HashAggregate [codegen id : 19]
Input [4]: [cs_quantity#4, cs_list_price#5, c_first_name#42, c_last_name#43]
Keys [2]: [c_last_name#43, c_first_name#42]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#47, isEmpty#48]
Results [4]: [c_last_name#43, c_first_name#42, sum#49, isEmpty#50]

(70) Exchange
Input [4]: [c_last_name#43, c_first_name#42, sum#49, isEmpty#50]
Arguments: hashpartitioning(c_last_name#43, c_first_name#42, 5), ENSURE_REQUIREMENTS, [id=#51]

(71) HashAggregate [codegen id : 20]
Input [4]: [c_last_name#43, c_first_name#42, sum#49, isEmpty#50]
Keys [2]: [c_last_name#43, c_first_name#42]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))#52]
Results [3]: [c_last_name#43, c_first_name#42, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))#52 AS sales#53]

(72) Scan parquet default.web_sales
Output [5]: [ws_sold_date_sk#54, ws_item_sk#55, ws_bill_customer_sk#56, ws_quantity#57, ws_list_price#58]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(73) ColumnarToRow [codegen id : 21]
Input [5]: [ws_sold_date_sk#54, ws_item_sk#55, ws_bill_customer_sk#56, ws_quantity#57, ws_list_price#58]

(74) Filter [codegen id : 21]
Input [5]: [ws_sold_date_sk#54, ws_item_sk#55, ws_bill_customer_sk#56, ws_quantity#57, ws_list_price#58]
Condition : (isnotnull(ws_bill_customer_sk#56) AND isnotnull(ws_sold_date_sk#54))

(75) Exchange
Input [5]: [ws_sold_date_sk#54, ws_item_sk#55, ws_bill_customer_sk#56, ws_quantity#57, ws_list_price#58]
Arguments: hashpartitioning(ws_item_sk#55, 5), ENSURE_REQUIREMENTS, [id=#59]

(76) Sort [codegen id : 22]
Input [5]: [ws_sold_date_sk#54, ws_item_sk#55, ws_bill_customer_sk#56, ws_quantity#57, ws_list_price#58]
Arguments: [ws_item_sk#55 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: 27]
Output [1]: [item_sk#21]

(78) Sort [codegen id : 27]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(79) SortMergeJoin
Left keys [1]: [ws_item_sk#55]
Right keys [1]: [item_sk#21]
Join condition: None

(80) Project [codegen id : 32]
Output [4]: [ws_sold_date_sk#54, ws_bill_customer_sk#56, ws_quantity#57, ws_list_price#58]
Input [5]: [ws_sold_date_sk#54, ws_item_sk#55, ws_bill_customer_sk#56, ws_quantity#57, ws_list_price#58]

(81) ReusedExchange [Reuses operator id: 41]
Output [3]: [c_customer_sk#27, sum#60, isEmpty#61]

(82) HashAggregate [codegen id : 30]
Input [3]: [c_customer_sk#27, sum#60, isEmpty#61]
Keys [1]: [c_customer_sk#27]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#62]
Results [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#62 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63]

(83) Filter [codegen id : 30]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#36, [id=#37] as decimal(32,6)))), DecimalType(38,8), true)))

(84) Project [codegen id : 30]
Output [1]: [c_customer_sk#27]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63]

(85) BroadcastExchange
Input [1]: [c_customer_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#64]

(86) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [ws_bill_customer_sk#56]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(87) ReusedExchange [Reuses operator id: 51]
Output [1]: [d_date_sk#9]

(88) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [ws_sold_date_sk#54]
Right keys [1]: [d_date_sk#9]
Join condition: None

(89) Project [codegen id : 32]
Output [3]: [ws_bill_customer_sk#56, ws_quantity#57, ws_list_price#58]
Input [5]: [ws_sold_date_sk#54, ws_bill_customer_sk#56, ws_quantity#57, ws_list_price#58, d_date_sk#9]

(90) Exchange
Input [3]: [ws_bill_customer_sk#56, ws_quantity#57, ws_list_price#58]
Arguments: hashpartitioning(ws_bill_customer_sk#56, 5), ENSURE_REQUIREMENTS, [id=#65]

(91) Sort [codegen id : 33]
Input [3]: [ws_bill_customer_sk#56, ws_quantity#57, ws_list_price#58]
Arguments: [ws_bill_customer_sk#56 ASC NULLS FIRST], false, 0

(92) Scan parquet default.customer
Output [3]: [c_customer_sk#27, c_first_name#42, c_last_name#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(93) ColumnarToRow [codegen id : 37]
Input [3]: [c_customer_sk#27, c_first_name#42, c_last_name#43]

(94) Filter [codegen id : 37]
Input [3]: [c_customer_sk#27, c_first_name#42, c_last_name#43]
Condition : isnotnull(c_customer_sk#27)

(95) ReusedExchange [Reuses operator id: 41]
Output [3]: [c_customer_sk#27, sum#60, isEmpty#61]

(96) HashAggregate [codegen id : 36]
Input [3]: [c_customer_sk#27, sum#60, isEmpty#61]
Keys [1]: [c_customer_sk#27]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#62]
Results [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#62 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63]

(97) Filter [codegen id : 36]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#36, [id=#37] as decimal(32,6)))), DecimalType(38,8), true)))

(98) Project [codegen id : 36]
Output [1]: [c_customer_sk#27 AS c_customer_sk#27#66]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63]

(99) BroadcastExchange
Input [1]: [c_customer_sk#27#66]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#67]

(100) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [c_customer_sk#27]
Right keys [1]: [c_customer_sk#27#66]
Join condition: None

(101) Exchange
Input [3]: [c_customer_sk#27, c_first_name#42, c_last_name#43]
Arguments: hashpartitioning(c_customer_sk#27, 5), ENSURE_REQUIREMENTS, [id=#68]

(102) Sort [codegen id : 38]
Input [3]: [c_customer_sk#27, c_first_name#42, c_last_name#43]
Arguments: [c_customer_sk#27 ASC NULLS FIRST], false, 0

(103) SortMergeJoin
Left keys [1]: [ws_bill_customer_sk#56]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(104) Project [codegen id : 39]
Output [4]: [ws_quantity#57, ws_list_price#58, c_first_name#42, c_last_name#43]
Input [6]: [ws_bill_customer_sk#56, ws_quantity#57, ws_list_price#58, c_customer_sk#27, c_first_name#42, c_last_name#43]

(105) HashAggregate [codegen id : 39]
Input [4]: [ws_quantity#57, ws_list_price#58, c_first_name#42, c_last_name#43]
Keys [2]: [c_last_name#43, c_first_name#42]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#57 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#58 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#69, isEmpty#70]
Results [4]: [c_last_name#43, c_first_name#42, sum#71, isEmpty#72]

(106) Exchange
Input [4]: [c_last_name#43, c_first_name#42, sum#71, isEmpty#72]
Arguments: hashpartitioning(c_last_name#43, c_first_name#42, 5), ENSURE_REQUIREMENTS, [id=#73]

(107) HashAggregate [codegen id : 40]
Input [4]: [c_last_name#43, c_first_name#42, sum#71, isEmpty#72]
Keys [2]: [c_last_name#43, c_first_name#42]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#57 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#58 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#57 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#58 as decimal(12,2)))), DecimalType(18,2), true))#74]
Results [3]: [c_last_name#43, c_first_name#42, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#57 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#58 as decimal(12,2)))), DecimalType(18,2), true))#74 AS sales#75]

(108) Union

(109) TakeOrderedAndProject
Input [3]: [c_last_name#43, c_first_name#42, sales#53]
Arguments: 100, [c_last_name#43 ASC NULLS FIRST, c_first_name#42 ASC NULLS FIRST, sales#53 ASC NULLS FIRST], [c_last_name#43, c_first_name#42, sales#53]

===== Subqueries =====

Subquery:1 Hosting operator id = 43 Hosting Expression = Subquery scalar-subquery#36, [id=#37]
* HashAggregate (131)
+- Exchange (130)
   +- * HashAggregate (129)
      +- * HashAggregate (128)
         +- Exchange (127)
            +- * HashAggregate (126)
               +- * Project (125)
                  +- * BroadcastHashJoin Inner BuildRight (124)
                     :- * Project (119)
                     :  +- * BroadcastHashJoin Inner BuildRight (118)
                     :     :- * Filter (112)
                     :     :  +- * ColumnarToRow (111)
                     :     :     +- Scan parquet default.store_sales (110)
                     :     +- BroadcastExchange (117)
                     :        +- * Project (116)
                     :           +- * Filter (115)
                     :              +- * ColumnarToRow (114)
                     :                 +- Scan parquet default.date_dim (113)
                     +- BroadcastExchange (123)
                        +- * Filter (122)
                           +- * ColumnarToRow (121)
                              +- Scan parquet default.customer (120)


(110) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#7, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(111) ColumnarToRow [codegen id : 3]
Input [4]: [ss_sold_date_sk#7, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(112) Filter [codegen id : 3]
Input [4]: [ss_sold_date_sk#7, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Condition : (isnotnull(ss_customer_sk#24) AND isnotnull(ss_sold_date_sk#7))

(113) Scan parquet default.date_dim
Output [2]: [d_date_sk#9, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(114) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#11]

(115) Filter [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#11]
Condition : (d_year#11 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#9))

(116) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [2]: [d_date_sk#9, d_year#11]

(117) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#76]

(118) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join condition: None

(119) Project [codegen id : 3]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Input [5]: [ss_sold_date_sk#7, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, d_date_sk#9]

(120) Scan parquet default.customer
Output [1]: [c_customer_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(121) ColumnarToRow [codegen id : 2]
Input [1]: [c_customer_sk#27]

(122) Filter [codegen id : 2]
Input [1]: [c_customer_sk#27]
Condition : isnotnull(c_customer_sk#27)

(123) BroadcastExchange
Input [1]: [c_customer_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#77]

(124) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(125) Project [codegen id : 3]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#27]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#27]

(126) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#27]
Keys [1]: [c_customer_sk#27]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#78, isEmpty#79]
Results [3]: [c_customer_sk#27, sum#80, isEmpty#81]

(127) Exchange
Input [3]: [c_customer_sk#27, sum#80, isEmpty#81]
Arguments: hashpartitioning(c_customer_sk#27, 5), ENSURE_REQUIREMENTS, [id=#82]

(128) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#27, sum#80, isEmpty#81]
Keys [1]: [c_customer_sk#27]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#83]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#83 AS csales#84]

(129) HashAggregate [codegen id : 4]
Input [1]: [csales#84]
Keys: []
Functions [1]: [partial_max(csales#84)]
Aggregate Attributes [1]: [max#85]
Results [1]: [max#86]

(130) Exchange
Input [1]: [max#86]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#87]

(131) HashAggregate [codegen id : 5]
Input [1]: [max#86]
Keys: []
Functions [1]: [max(csales#84)]
Aggregate Attributes [1]: [max(csales#84)#88]
Results [1]: [max(csales#84)#88 AS tpcds_cmax#89]

Subquery:2 Hosting operator id = 61 Hosting Expression = ReusedSubquery Subquery scalar-subquery#36, [id=#37]

Subquery:3 Hosting operator id = 83 Hosting Expression = ReusedSubquery Subquery scalar-subquery#36, [id=#37]

Subquery:4 Hosting operator id = 97 Hosting Expression = ReusedSubquery Subquery scalar-subquery#36, [id=#37]


